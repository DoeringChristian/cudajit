---
source: src/compiler.rs
expression: compiler.asm
---
.version 8.0
.target sm_86
.address_size 64

.entry cujit(
	.param .align 8 .b8 params[16]) {

	.reg.b8   %b <8>; .reg.b16 %w<8>; .reg.b32 %r<8>;
	.reg.b64  %rd<8>; .reg.f32 %f<8>; .reg.f64 %d<8>;
	.reg.pred %p <8>;

	mov.u32 %r0, %ctaid.x;
	mov.u32 %r1, %ntid.x;
	mov.u32 %r2, %tid.x;
	mad.lo.u32 %r0, %r0, %r1, %r2; // r0 <- Index

	// Index Conditional (jump to done if Index >= Size).
	ld.param.u32 %r2, [params]; // r2 <- params[0] (Size)
	setp.ge.u32 %p0, %r0, %r2; // p0 <- r0 >= r2
	@%p0 bra done; // if p0 => done
	
	mov.u32 %r3, %nctaid.x; // r3 <- nctaid.x
	mul.lo.u32 %r1, %r3, %r1; // r1 <- r3 * r1
	
body: // sm_86

	// [0]: Var { op: Load(ParamId(1)), ty: U32, reg: 4 } =>
	ld.param.u64 %rd0, [params+8];
	mad.wide.u32 %rd0, %r0, 4, %rd0;
	ld.global.cs.u32 %r4, [%rd0];

	// [1]: Var { op: ConstU32(2), ty: U32, reg: 5 } =>
	mov.u32 %r5, 0X00000002;

	// [2]: Var { op: Mod(VarId(0), VarId(1)), ty: U32, reg: 6 } =>
	rem.u32 %r6, %r4, %r5;

	// [3]: Var { op: Store(VarId(2), ParamId(1)), ty: F32, reg: 7 } =>
	ld.param.u64 %rd0, [params + 8]; // rd0 <- params[offset]
	mad.wide.u32 %rd0, %r0, 4, %rd0; // rd0 <- Index * ty.size() + params[offset]
	st.global.cs.f32 [%rd0], %r6; // (Index * ty.size() + params[offset])[Index] <- var

	//End of Kernel:
	add.u32 %r0, %r0, %r1; // r0 <- r0 + r1
	setp.ge.u32 %p0, %r0, %r2; // p0 <- r1 >= r2
	@!%p0 bra body; // if p0 => body


done:

	ret;
}

