---
source: src/backend/optix/test.rs
expression: jit.kernel_debug()
---
===============================================
Kernel 16235532381791671916:

.version 8.0
.target sm_86
.address_size 64

.const .align 8 .b8 params[16];
.entry __raygen__cujit(){

	.reg.b8   %b <9>; .reg.b16 %w<9>; .reg.b32 %r<9>;
	.reg.b64  %rd<9>; .reg.f32 %f<9>; .reg.f64 %d<9>;
	.reg.pred %p <9>;

	call (%r0), _optix_get_launch_index_x, ();
	ld.const.u32 %r1, [params + 4];
	add.u32 %r0, %r0, %r1;

body:

	// [0]: ScheduleVar { op: Idx, deps: [], ty: U32, param_ty: None, reg: 6, buf: None, tex: None, literal: 0, size: 3 } =>
	mov.u32 %r6, %r0;


	// [1]: ScheduleVar { op: Literal, deps: [], ty: U32, param_ty: None, reg: 7, buf: None, tex: None, literal: 2, size: 1 } =>
	mov.b32 %r7, 0x2;


	// [2]: ScheduleVar { op: Add, deps: [SVarId(0), SVarId(1)], ty: U32, param_ty: None, reg: 5, buf: None, tex: None, literal: 0, size: 3 } =>
	add.u32 %r5, %r6, %r7;

	// [3]: ScheduleVar { op: Literal, deps: [], ty: Bool, param_ty: None, reg: 8, buf: None, tex: None, literal: 1, size: 1 } =>
	mov.pred %p8, 0x1;


	// [4]: ScheduleVar { op: And, deps: [SVarId(2), SVarId(3)], ty: U32, param_ty: Output, reg: 4, buf: Some(0), tex: None, literal: 0, size: 3 } =>
	selp.b32 %r4, %r5, 0, %p8;

	// Store:
	ld.const.u64 %rd0, [params + 8]; // rd0 <- params[offset]
	mad.wide.u32 %rd0, %r0, 4, %rd0; // rd0 <- Index * ty.size() + params[offset]
	st.global.cs.u32 [%rd0], %r4; // (Index * ty.size() + params[offset])[Index] <- var

	ret;
}

