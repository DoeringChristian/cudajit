---
source: src/backend/cuda/test.rs
expression: jit.kernel_debug()
---
===============================================
Kernel 14233316816652473877:

.version 8.0
.target sm_86
.address_size 64

.entry cujit(
	.param .align 8 .b8 params[32]) {

	.reg.b8   %b <10>; .reg.b16 %w<10>; .reg.b32 %r<10>;
	.reg.b64  %rd<10>; .reg.f32 %f<10>; .reg.f64 %d<10>;
	.reg.pred %p <10>;

	mov.u32 %r0, %ctaid.x;
	mov.u32 %r1, %ntid.x;
	mov.u32 %r2, %tid.x;
	mad.lo.u32 %r0, %r0, %r1, %r2; // r0 <- Index

	// Index Conditional (jump to done if Index >= Size).
	ld.param.u32 %r2, [params]; // r2 <- params[0] (Size)
	setp.ge.u32 %p0, %r0, %r2; // p0 <- r0 >= r2
	@%p0 bra done; // if p0 => done
	
	mov.u32 %r3, %nctaid.x; // r3 <- nctaid.x
	mul.lo.u32 %r1, %r3, %r1; // r1 <- r3 * r1
	
body: // sm_86

	// [0]: ScheduleVar { op: Data, deps: [], ty: U32, param_ty: Input, reg: 7, buf: Some(0), tex: None, accel: None, literal: 0, size: 2 } =>
	ld.param.u64 %rd0, [params+8];
	mad.wide.u32 %rd0, %r0, 4, %rd0;
	ld.global.cs.u32 %r7, [%rd0];

	// [1]: ScheduleVar { op: Literal, deps: [], ty: U32, param_ty: None, reg: 8, buf: None, tex: None, accel: None, literal: 1065353216, size: 1 } =>
	mov.b32 %r8, 0x3f800000;


	// [2]: ScheduleVar { op: Or, deps: [SVarId(0), SVarId(1)], ty: U32, param_ty: None, reg: 6, buf: None, tex: None, accel: None, literal: 0, size: 2 } =>
	or.b32 %r6, %r7, %r8;

	// [3]: ScheduleVar { op: Literal, deps: [], ty: U32, param_ty: None, reg: 9, buf: None, tex: None, accel: None, literal: 9, size: 1 } =>
	mov.b32 %r9, 0x9;


	// [4]: ScheduleVar { op: Shr, deps: [SVarId(2), SVarId(3)], ty: U32, param_ty: None, reg: 5, buf: None, tex: None, accel: None, literal: 0, size: 2 } =>
	shr.b32 %r5, %r6, %r9;

	// [5]: ScheduleVar { op: Bitcast, deps: [SVarId(4)], ty: F32, param_ty: Output, reg: 4, buf: Some(1), tex: None, accel: None, literal: 0, size: 2 } =>
    mov.b32 %f4, %r5;

	// Store:
	ld.param.u64 %rd0, [params + 16]; // rd0 <- params[offset]
	mad.wide.u32 %rd0, %r0, 4, %rd0; // rd0 <- Index * ty.size() + params[offset]
	st.global.cs.f32 [%rd0], %f4; // (Index * ty.size() + params[offset])[Index] <- var

	//End of Kernel:

	add.u32 %r0, %r0, %r1; // r0 <- r0 + r1
	setp.ge.u32 %p0, %r0, %r2; // p0 <- r1 >= r2
	@!%p0 bra body; // if p0 => body


done:

	ret;
}

