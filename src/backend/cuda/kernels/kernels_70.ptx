//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-31833905
// Cuda compilation tools, release 11.8, V11.8.89
// Based on NVVM 7.0.1
//

.version 7.8
.target sm_70
.address_size 64

	// .globl	reduce_sum_i32
.extern .shared .align 16 .b8 shared_d[];
.extern .shared .align 16 .b8 shared[];

.visible .entry reduce_sum_i32(
	.param .u64 reduce_sum_i32_param_0,
	.param .u32 reduce_sum_i32_param_1,
	.param .u64 reduce_sum_i32_param_2
)
{
	.reg .pred 	%p<15>;
	.reg .b32 	%r<63>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd3, [reduce_sum_i32_param_0];
	ld.param.u32 	%r22, [reduce_sum_i32_param_1];
	ld.param.u64 	%rd2, [reduce_sum_i32_param_2];
	cvta.to.global.u64 	%rd1, %rd3;
	mov.u32 	%r24, %ctaid.x;
	shl.b32 	%r25, %r24, 11;
	mov.u32 	%r1, %tid.x;
	add.s32 	%r55, %r25, %r1;
	setp.ge.u32 	%p1, %r55, %r22;
	mov.u32 	%r56, 0;
	@%p1 bra 	$L__BB0_5;

	mov.u32 	%r27, %nctaid.x;
	shl.b32 	%r3, %r27, 11;

$L__BB0_2:
	mul.wide.u32 	%rd4, %r55, 4;
	add.s64 	%rd5, %rd1, %rd4;
	ld.global.u32 	%r28, [%rd5];
	add.s32 	%r56, %r28, %r56;
	add.s32 	%r7, %r55, 1024;
	setp.ge.u32 	%p2, %r7, %r22;
	@%p2 bra 	$L__BB0_4;

	mul.wide.u32 	%rd6, %r7, 4;
	add.s64 	%rd7, %rd1, %rd6;
	ld.global.u32 	%r29, [%rd7];
	add.s32 	%r56, %r29, %r56;

$L__BB0_4:
	add.s32 	%r55, %r55, %r3;
	setp.lt.u32 	%p3, %r55, %r22;
	@%p3 bra 	$L__BB0_2;

$L__BB0_5:
	shl.b32 	%r30, %r1, 2;
	mov.u32 	%r31, shared;
	add.s32 	%r12, %r31, %r30;
	st.shared.u32 	[%r12], %r56;
	bar.sync 	0;
	setp.gt.u32 	%p4, %r1, 511;
	@%p4 bra 	$L__BB0_7;

	ld.shared.u32 	%r32, [%r12+2048];
	add.s32 	%r56, %r32, %r56;
	st.shared.u32 	[%r12], %r56;

$L__BB0_7:
	bar.sync 	0;
	setp.gt.u32 	%p5, %r1, 255;
	@%p5 bra 	$L__BB0_9;

	ld.shared.u32 	%r33, [%r12+1024];
	add.s32 	%r56, %r33, %r56;
	st.shared.u32 	[%r12], %r56;

$L__BB0_9:
	bar.sync 	0;
	setp.gt.u32 	%p6, %r1, 127;
	@%p6 bra 	$L__BB0_11;

	ld.shared.u32 	%r34, [%r12+512];
	add.s32 	%r56, %r34, %r56;
	st.shared.u32 	[%r12], %r56;

$L__BB0_11:
	bar.sync 	0;
	setp.gt.u32 	%p7, %r1, 63;
	@%p7 bra 	$L__BB0_13;

	ld.shared.u32 	%r35, [%r12+256];
	add.s32 	%r56, %r35, %r56;
	st.shared.u32 	[%r12], %r56;

$L__BB0_13:
	bar.sync 	0;
	setp.gt.u32 	%p8, %r1, 31;
	@%p8 bra 	$L__BB0_16;

	ld.shared.u32 	%r36, [%r12+128];
	add.s32 	%r37, %r36, %r56;
	mov.u32 	%r38, 2;
	mov.u32 	%r39, 31;
	mov.u32 	%r40, 16;
	mov.u32 	%r41, -1;
	shfl.sync.down.b32 	%r42|%p9, %r37, %r40, %r39, %r41;
	add.s32 	%r43, %r42, %r37;
	mov.u32 	%r44, 8;
	shfl.sync.down.b32 	%r45|%p10, %r43, %r44, %r39, %r41;
	add.s32 	%r46, %r45, %r43;
	mov.u32 	%r47, 4;
	shfl.sync.down.b32 	%r48|%p11, %r46, %r47, %r39, %r41;
	add.s32 	%r49, %r48, %r46;
	shfl.sync.down.b32 	%r50|%p12, %r49, %r38, %r39, %r41;
	add.s32 	%r51, %r50, %r49;
	mov.u32 	%r52, 1;
	shfl.sync.down.b32 	%r53|%p13, %r51, %r52, %r39, %r41;
	add.s32 	%r21, %r53, %r51;
	setp.ne.s32 	%p14, %r1, 0;
	@%p14 bra 	$L__BB0_16;

	cvta.to.global.u64 	%rd8, %rd2;
	mul.wide.u32 	%rd9, %r24, 4;
	add.s64 	%rd10, %rd8, %rd9;
	st.global.u32 	[%rd10], %r21;

$L__BB0_16:
	ret;

}
	// .globl	reduce_sum_u32
.visible .entry reduce_sum_u32(
	.param .u64 reduce_sum_u32_param_0,
	.param .u32 reduce_sum_u32_param_1,
	.param .u64 reduce_sum_u32_param_2
)
{
	.reg .pred 	%p<15>;
	.reg .b32 	%r<63>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd3, [reduce_sum_u32_param_0];
	ld.param.u32 	%r22, [reduce_sum_u32_param_1];
	ld.param.u64 	%rd2, [reduce_sum_u32_param_2];
	cvta.to.global.u64 	%rd1, %rd3;
	mov.u32 	%r24, %ctaid.x;
	shl.b32 	%r25, %r24, 11;
	mov.u32 	%r1, %tid.x;
	add.s32 	%r55, %r25, %r1;
	setp.ge.u32 	%p1, %r55, %r22;
	mov.u32 	%r56, 0;
	@%p1 bra 	$L__BB1_5;

	mov.u32 	%r27, %nctaid.x;
	shl.b32 	%r3, %r27, 11;

$L__BB1_2:
	mul.wide.u32 	%rd4, %r55, 4;
	add.s64 	%rd5, %rd1, %rd4;
	ld.global.u32 	%r28, [%rd5];
	add.s32 	%r56, %r28, %r56;
	add.s32 	%r7, %r55, 1024;
	setp.ge.u32 	%p2, %r7, %r22;
	@%p2 bra 	$L__BB1_4;

	mul.wide.u32 	%rd6, %r7, 4;
	add.s64 	%rd7, %rd1, %rd6;
	ld.global.u32 	%r29, [%rd7];
	add.s32 	%r56, %r29, %r56;

$L__BB1_4:
	add.s32 	%r55, %r55, %r3;
	setp.lt.u32 	%p3, %r55, %r22;
	@%p3 bra 	$L__BB1_2;

$L__BB1_5:
	shl.b32 	%r30, %r1, 2;
	mov.u32 	%r31, shared;
	add.s32 	%r12, %r31, %r30;
	st.shared.u32 	[%r12], %r56;
	bar.sync 	0;
	setp.gt.u32 	%p4, %r1, 511;
	@%p4 bra 	$L__BB1_7;

	ld.shared.u32 	%r32, [%r12+2048];
	add.s32 	%r56, %r32, %r56;
	st.shared.u32 	[%r12], %r56;

$L__BB1_7:
	bar.sync 	0;
	setp.gt.u32 	%p5, %r1, 255;
	@%p5 bra 	$L__BB1_9;

	ld.shared.u32 	%r33, [%r12+1024];
	add.s32 	%r56, %r33, %r56;
	st.shared.u32 	[%r12], %r56;

$L__BB1_9:
	bar.sync 	0;
	setp.gt.u32 	%p6, %r1, 127;
	@%p6 bra 	$L__BB1_11;

	ld.shared.u32 	%r34, [%r12+512];
	add.s32 	%r56, %r34, %r56;
	st.shared.u32 	[%r12], %r56;

$L__BB1_11:
	bar.sync 	0;
	setp.gt.u32 	%p7, %r1, 63;
	@%p7 bra 	$L__BB1_13;

	ld.shared.u32 	%r35, [%r12+256];
	add.s32 	%r56, %r35, %r56;
	st.shared.u32 	[%r12], %r56;

$L__BB1_13:
	bar.sync 	0;
	setp.gt.u32 	%p8, %r1, 31;
	@%p8 bra 	$L__BB1_16;

	ld.shared.u32 	%r36, [%r12+128];
	add.s32 	%r37, %r36, %r56;
	mov.u32 	%r38, 2;
	mov.u32 	%r39, 31;
	mov.u32 	%r40, 16;
	mov.u32 	%r41, -1;
	shfl.sync.down.b32 	%r42|%p9, %r37, %r40, %r39, %r41;
	add.s32 	%r43, %r42, %r37;
	mov.u32 	%r44, 8;
	shfl.sync.down.b32 	%r45|%p10, %r43, %r44, %r39, %r41;
	add.s32 	%r46, %r45, %r43;
	mov.u32 	%r47, 4;
	shfl.sync.down.b32 	%r48|%p11, %r46, %r47, %r39, %r41;
	add.s32 	%r49, %r48, %r46;
	shfl.sync.down.b32 	%r50|%p12, %r49, %r38, %r39, %r41;
	add.s32 	%r51, %r50, %r49;
	mov.u32 	%r52, 1;
	shfl.sync.down.b32 	%r53|%p13, %r51, %r52, %r39, %r41;
	add.s32 	%r21, %r53, %r51;
	setp.ne.s32 	%p14, %r1, 0;
	@%p14 bra 	$L__BB1_16;

	cvta.to.global.u64 	%rd8, %rd2;
	mul.wide.u32 	%rd9, %r24, 4;
	add.s64 	%rd10, %rd8, %rd9;
	st.global.u32 	[%rd10], %r21;

$L__BB1_16:
	ret;

}
	// .globl	reduce_sum_i64
.visible .entry reduce_sum_i64(
	.param .u64 reduce_sum_i64_param_0,
	.param .u32 reduce_sum_i64_param_1,
	.param .u64 reduce_sum_i64_param_2
)
{
	.reg .pred 	%p<20>;
	.reg .b32 	%r<42>;
	.reg .b64 	%rd<51>;


	ld.param.u64 	%rd18, [reduce_sum_i64_param_0];
	ld.param.u32 	%r9, [reduce_sum_i64_param_1];
	ld.param.u64 	%rd16, [reduce_sum_i64_param_2];
	cvta.to.global.u64 	%rd1, %rd18;
	mov.u32 	%r1, %ctaid.x;
	shl.b32 	%r10, %r1, 11;
	mov.u32 	%r2, %tid.x;
	add.s32 	%r41, %r10, %r2;
	setp.ge.u32 	%p1, %r41, %r9;
	mov.u64 	%rd44, 0;
	@%p1 bra 	$L__BB2_5;

	mov.u32 	%r11, %nctaid.x;
	shl.b32 	%r4, %r11, 11;

$L__BB2_2:
	mul.wide.u32 	%rd20, %r41, 8;
	add.s64 	%rd21, %rd1, %rd20;
	ld.global.u64 	%rd22, [%rd21];
	add.s64 	%rd44, %rd22, %rd44;
	add.s32 	%r6, %r41, 1024;
	setp.ge.u32 	%p2, %r6, %r9;
	@%p2 bra 	$L__BB2_4;

	mul.wide.u32 	%rd23, %r6, 8;
	add.s64 	%rd24, %rd1, %rd23;
	ld.global.u64 	%rd25, [%rd24];
	add.s64 	%rd44, %rd25, %rd44;

$L__BB2_4:
	add.s32 	%r41, %r41, %r4;
	setp.lt.u32 	%p3, %r41, %r9;
	@%p3 bra 	$L__BB2_2;

$L__BB2_5:
	shl.b32 	%r12, %r2, 3;
	mov.u32 	%r13, shared;
	add.s32 	%r8, %r13, %r12;
	st.shared.u64 	[%r8], %rd44;
	bar.sync 	0;
	setp.gt.u32 	%p4, %r2, 511;
	@%p4 bra 	$L__BB2_7;

	ld.shared.u64 	%rd26, [%r8+4096];
	add.s64 	%rd44, %rd26, %rd44;
	st.shared.u64 	[%r8], %rd44;

$L__BB2_7:
	bar.sync 	0;
	setp.gt.u32 	%p5, %r2, 255;
	@%p5 bra 	$L__BB2_9;

	ld.shared.u64 	%rd27, [%r8+2048];
	add.s64 	%rd44, %rd27, %rd44;
	st.shared.u64 	[%r8], %rd44;

$L__BB2_9:
	bar.sync 	0;
	setp.gt.u32 	%p6, %r2, 127;
	@%p6 bra 	$L__BB2_11;

	ld.shared.u64 	%rd28, [%r8+1024];
	add.s64 	%rd44, %rd28, %rd44;
	st.shared.u64 	[%r8], %rd44;

$L__BB2_11:
	bar.sync 	0;
	setp.gt.u32 	%p7, %r2, 63;
	@%p7 bra 	$L__BB2_13;

	ld.shared.u64 	%rd29, [%r8+512];
	add.s64 	%rd44, %rd29, %rd44;
	st.shared.u64 	[%r8], %rd44;

$L__BB2_13:
	bar.sync 	0;
	setp.gt.u32 	%p8, %r2, 31;
	@%p8 bra 	$L__BB2_16;

	ld.shared.u64 	%rd40, [%r8+256];
	add.s64 	%rd30, %rd40, %rd44;
	// begin inline asm
	mov.b64 {%r14,%r15}, %rd30;
	// end inline asm
	mov.u32 	%r34, 2;
	mov.u32 	%r35, 31;
	mov.u32 	%r36, 16;
	mov.u32 	%r37, -1;
	shfl.sync.down.b32 	%r17|%p9, %r15, %r36, %r35, %r37;
	shfl.sync.down.b32 	%r16|%p10, %r14, %r36, %r35, %r37;
	// begin inline asm
	mov.b64 %rd31, {%r16,%r17};
	// end inline asm
	add.s64 	%rd32, %rd31, %rd30;
	// begin inline asm
	mov.b64 {%r18,%r19}, %rd32;
	// end inline asm
	mov.u32 	%r38, 8;
	shfl.sync.down.b32 	%r21|%p11, %r19, %r38, %r35, %r37;
	shfl.sync.down.b32 	%r20|%p12, %r18, %r38, %r35, %r37;
	// begin inline asm
	mov.b64 %rd33, {%r20,%r21};
	// end inline asm
	add.s64 	%rd34, %rd33, %rd32;
	// begin inline asm
	mov.b64 {%r22,%r23}, %rd34;
	// end inline asm
	mov.u32 	%r39, 4;
	shfl.sync.down.b32 	%r25|%p13, %r23, %r39, %r35, %r37;
	shfl.sync.down.b32 	%r24|%p14, %r22, %r39, %r35, %r37;
	// begin inline asm
	mov.b64 %rd35, {%r24,%r25};
	// end inline asm
	add.s64 	%rd36, %rd35, %rd34;
	// begin inline asm
	mov.b64 {%r26,%r27}, %rd36;
	// end inline asm
	shfl.sync.down.b32 	%r29|%p15, %r27, %r34, %r35, %r37;
	shfl.sync.down.b32 	%r28|%p16, %r26, %r34, %r35, %r37;
	// begin inline asm
	mov.b64 %rd37, {%r28,%r29};
	// end inline asm
	add.s64 	%rd38, %rd37, %rd36;
	// begin inline asm
	mov.b64 {%r30,%r31}, %rd38;
	// end inline asm
	mov.u32 	%r40, 1;
	shfl.sync.down.b32 	%r33|%p17, %r31, %r40, %r35, %r37;
	shfl.sync.down.b32 	%r32|%p18, %r30, %r40, %r35, %r37;
	// begin inline asm
	mov.b64 %rd39, {%r32,%r33};
	// end inline asm
	add.s64 	%rd15, %rd39, %rd38;
	setp.ne.s32 	%p19, %r2, 0;
	@%p19 bra 	$L__BB2_16;

	cvta.to.global.u64 	%rd41, %rd16;
	mul.wide.u32 	%rd42, %r1, 8;
	add.s64 	%rd43, %rd41, %rd42;
	st.global.u64 	[%rd43], %rd15;

$L__BB2_16:
	ret;

}
	// .globl	reduce_sum_u64
.visible .entry reduce_sum_u64(
	.param .u64 reduce_sum_u64_param_0,
	.param .u32 reduce_sum_u64_param_1,
	.param .u64 reduce_sum_u64_param_2
)
{
	.reg .pred 	%p<20>;
	.reg .b32 	%r<42>;
	.reg .b64 	%rd<51>;


	ld.param.u64 	%rd18, [reduce_sum_u64_param_0];
	ld.param.u32 	%r9, [reduce_sum_u64_param_1];
	ld.param.u64 	%rd16, [reduce_sum_u64_param_2];
	cvta.to.global.u64 	%rd1, %rd18;
	mov.u32 	%r1, %ctaid.x;
	shl.b32 	%r10, %r1, 11;
	mov.u32 	%r2, %tid.x;
	add.s32 	%r41, %r10, %r2;
	setp.ge.u32 	%p1, %r41, %r9;
	mov.u64 	%rd44, 0;
	@%p1 bra 	$L__BB3_5;

	mov.u32 	%r11, %nctaid.x;
	shl.b32 	%r4, %r11, 11;

$L__BB3_2:
	mul.wide.u32 	%rd20, %r41, 8;
	add.s64 	%rd21, %rd1, %rd20;
	ld.global.u64 	%rd22, [%rd21];
	add.s64 	%rd44, %rd22, %rd44;
	add.s32 	%r6, %r41, 1024;
	setp.ge.u32 	%p2, %r6, %r9;
	@%p2 bra 	$L__BB3_4;

	mul.wide.u32 	%rd23, %r6, 8;
	add.s64 	%rd24, %rd1, %rd23;
	ld.global.u64 	%rd25, [%rd24];
	add.s64 	%rd44, %rd25, %rd44;

$L__BB3_4:
	add.s32 	%r41, %r41, %r4;
	setp.lt.u32 	%p3, %r41, %r9;
	@%p3 bra 	$L__BB3_2;

$L__BB3_5:
	shl.b32 	%r12, %r2, 3;
	mov.u32 	%r13, shared;
	add.s32 	%r8, %r13, %r12;
	st.shared.u64 	[%r8], %rd44;
	bar.sync 	0;
	setp.gt.u32 	%p4, %r2, 511;
	@%p4 bra 	$L__BB3_7;

	ld.shared.u64 	%rd26, [%r8+4096];
	add.s64 	%rd44, %rd26, %rd44;
	st.shared.u64 	[%r8], %rd44;

$L__BB3_7:
	bar.sync 	0;
	setp.gt.u32 	%p5, %r2, 255;
	@%p5 bra 	$L__BB3_9;

	ld.shared.u64 	%rd27, [%r8+2048];
	add.s64 	%rd44, %rd27, %rd44;
	st.shared.u64 	[%r8], %rd44;

$L__BB3_9:
	bar.sync 	0;
	setp.gt.u32 	%p6, %r2, 127;
	@%p6 bra 	$L__BB3_11;

	ld.shared.u64 	%rd28, [%r8+1024];
	add.s64 	%rd44, %rd28, %rd44;
	st.shared.u64 	[%r8], %rd44;

$L__BB3_11:
	bar.sync 	0;
	setp.gt.u32 	%p7, %r2, 63;
	@%p7 bra 	$L__BB3_13;

	ld.shared.u64 	%rd29, [%r8+512];
	add.s64 	%rd44, %rd29, %rd44;
	st.shared.u64 	[%r8], %rd44;

$L__BB3_13:
	bar.sync 	0;
	setp.gt.u32 	%p8, %r2, 31;
	@%p8 bra 	$L__BB3_16;

	ld.shared.u64 	%rd40, [%r8+256];
	add.s64 	%rd30, %rd40, %rd44;
	// begin inline asm
	mov.b64 {%r14,%r15}, %rd30;
	// end inline asm
	mov.u32 	%r34, 2;
	mov.u32 	%r35, 31;
	mov.u32 	%r36, 16;
	mov.u32 	%r37, -1;
	shfl.sync.down.b32 	%r17|%p9, %r15, %r36, %r35, %r37;
	shfl.sync.down.b32 	%r16|%p10, %r14, %r36, %r35, %r37;
	// begin inline asm
	mov.b64 %rd31, {%r16,%r17};
	// end inline asm
	add.s64 	%rd32, %rd31, %rd30;
	// begin inline asm
	mov.b64 {%r18,%r19}, %rd32;
	// end inline asm
	mov.u32 	%r38, 8;
	shfl.sync.down.b32 	%r21|%p11, %r19, %r38, %r35, %r37;
	shfl.sync.down.b32 	%r20|%p12, %r18, %r38, %r35, %r37;
	// begin inline asm
	mov.b64 %rd33, {%r20,%r21};
	// end inline asm
	add.s64 	%rd34, %rd33, %rd32;
	// begin inline asm
	mov.b64 {%r22,%r23}, %rd34;
	// end inline asm
	mov.u32 	%r39, 4;
	shfl.sync.down.b32 	%r25|%p13, %r23, %r39, %r35, %r37;
	shfl.sync.down.b32 	%r24|%p14, %r22, %r39, %r35, %r37;
	// begin inline asm
	mov.b64 %rd35, {%r24,%r25};
	// end inline asm
	add.s64 	%rd36, %rd35, %rd34;
	// begin inline asm
	mov.b64 {%r26,%r27}, %rd36;
	// end inline asm
	shfl.sync.down.b32 	%r29|%p15, %r27, %r34, %r35, %r37;
	shfl.sync.down.b32 	%r28|%p16, %r26, %r34, %r35, %r37;
	// begin inline asm
	mov.b64 %rd37, {%r28,%r29};
	// end inline asm
	add.s64 	%rd38, %rd37, %rd36;
	// begin inline asm
	mov.b64 {%r30,%r31}, %rd38;
	// end inline asm
	mov.u32 	%r40, 1;
	shfl.sync.down.b32 	%r33|%p17, %r31, %r40, %r35, %r37;
	shfl.sync.down.b32 	%r32|%p18, %r30, %r40, %r35, %r37;
	// begin inline asm
	mov.b64 %rd39, {%r32,%r33};
	// end inline asm
	add.s64 	%rd15, %rd39, %rd38;
	setp.ne.s32 	%p19, %r2, 0;
	@%p19 bra 	$L__BB3_16;

	cvta.to.global.u64 	%rd41, %rd16;
	mul.wide.u32 	%rd42, %r1, 8;
	add.s64 	%rd43, %rd41, %rd42;
	st.global.u64 	[%rd43], %rd15;

$L__BB3_16:
	ret;

}
	// .globl	reduce_sum_f32
.visible .entry reduce_sum_f32(
	.param .u64 reduce_sum_f32_param_0,
	.param .u32 reduce_sum_f32_param_1,
	.param .u64 reduce_sum_f32_param_2
)
{
	.reg .pred 	%p<15>;
	.reg .f32 	%f<41>;
	.reg .b32 	%r<33>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd3, [reduce_sum_f32_param_0];
	ld.param.u32 	%r8, [reduce_sum_f32_param_1];
	ld.param.u64 	%rd2, [reduce_sum_f32_param_2];
	cvta.to.global.u64 	%rd1, %rd3;
	mov.u32 	%r9, %ctaid.x;
	shl.b32 	%r10, %r9, 11;
	mov.u32 	%r1, %tid.x;
	add.s32 	%r32, %r10, %r1;
	setp.ge.u32 	%p1, %r32, %r8;
	mov.f32 	%f34, 0f00000000;
	@%p1 bra 	$L__BB4_5;

	mov.u32 	%r11, %nctaid.x;
	shl.b32 	%r3, %r11, 11;

$L__BB4_2:
	mul.wide.u32 	%rd4, %r32, 4;
	add.s64 	%rd5, %rd1, %rd4;
	ld.global.f32 	%f17, [%rd5];
	add.f32 	%f34, %f34, %f17;
	add.s32 	%r5, %r32, 1024;
	setp.ge.u32 	%p2, %r5, %r8;
	@%p2 bra 	$L__BB4_4;

	mul.wide.u32 	%rd6, %r5, 4;
	add.s64 	%rd7, %rd1, %rd6;
	ld.global.f32 	%f18, [%rd7];
	add.f32 	%f34, %f34, %f18;

$L__BB4_4:
	add.s32 	%r32, %r32, %r3;
	setp.lt.u32 	%p3, %r32, %r8;
	@%p3 bra 	$L__BB4_2;

$L__BB4_5:
	shl.b32 	%r12, %r1, 2;
	mov.u32 	%r13, shared;
	add.s32 	%r7, %r13, %r12;
	st.shared.f32 	[%r7], %f34;
	bar.sync 	0;
	setp.gt.u32 	%p4, %r1, 511;
	@%p4 bra 	$L__BB4_7;

	ld.shared.f32 	%f19, [%r7+2048];
	add.f32 	%f34, %f34, %f19;
	st.shared.f32 	[%r7], %f34;

$L__BB4_7:
	bar.sync 	0;
	setp.gt.u32 	%p5, %r1, 255;
	@%p5 bra 	$L__BB4_9;

	ld.shared.f32 	%f20, [%r7+1024];
	add.f32 	%f34, %f34, %f20;
	st.shared.f32 	[%r7], %f34;

$L__BB4_9:
	bar.sync 	0;
	setp.gt.u32 	%p6, %r1, 127;
	@%p6 bra 	$L__BB4_11;

	ld.shared.f32 	%f21, [%r7+512];
	add.f32 	%f34, %f34, %f21;
	st.shared.f32 	[%r7], %f34;

$L__BB4_11:
	bar.sync 	0;
	setp.gt.u32 	%p7, %r1, 63;
	@%p7 bra 	$L__BB4_13;

	ld.shared.f32 	%f22, [%r7+256];
	add.f32 	%f34, %f34, %f22;
	st.shared.f32 	[%r7], %f34;

$L__BB4_13:
	bar.sync 	0;
	setp.gt.u32 	%p8, %r1, 31;
	@%p8 bra 	$L__BB4_16;

	ld.shared.f32 	%f23, [%r7+128];
	add.f32 	%f24, %f34, %f23;
	mov.b32 	%r14, %f24;
	mov.u32 	%r15, 2;
	mov.u32 	%r16, 31;
	mov.u32 	%r17, 16;
	mov.u32 	%r18, -1;
	shfl.sync.down.b32 	%r19|%p9, %r14, %r17, %r16, %r18;
	mov.b32 	%f25, %r19;
	add.f32 	%f26, %f24, %f25;
	mov.b32 	%r20, %f26;
	mov.u32 	%r21, 8;
	shfl.sync.down.b32 	%r22|%p10, %r20, %r21, %r16, %r18;
	mov.b32 	%f27, %r22;
	add.f32 	%f28, %f26, %f27;
	mov.b32 	%r23, %f28;
	mov.u32 	%r24, 4;
	shfl.sync.down.b32 	%r25|%p11, %r23, %r24, %r16, %r18;
	mov.b32 	%f29, %r25;
	add.f32 	%f30, %f28, %f29;
	mov.b32 	%r26, %f30;
	shfl.sync.down.b32 	%r27|%p12, %r26, %r15, %r16, %r18;
	mov.b32 	%f31, %r27;
	add.f32 	%f32, %f30, %f31;
	mov.b32 	%r28, %f32;
	mov.u32 	%r29, 1;
	shfl.sync.down.b32 	%r30|%p13, %r28, %r29, %r16, %r18;
	mov.b32 	%f33, %r30;
	add.f32 	%f14, %f32, %f33;
	setp.ne.s32 	%p14, %r1, 0;
	@%p14 bra 	$L__BB4_16;

	cvta.to.global.u64 	%rd8, %rd2;
	mul.wide.u32 	%rd9, %r9, 4;
	add.s64 	%rd10, %rd8, %rd9;
	st.global.f32 	[%rd10], %f14;

$L__BB4_16:
	ret;

}
	// .globl	reduce_sum_f64
.visible .entry reduce_sum_f64(
	.param .u64 reduce_sum_f64_param_0,
	.param .u32 reduce_sum_f64_param_1,
	.param .u64 reduce_sum_f64_param_2
)
{
	.reg .pred 	%p<20>;
	.reg .b32 	%r<42>;
	.reg .f64 	%fd<41>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd3, [reduce_sum_f64_param_0];
	ld.param.u32 	%r9, [reduce_sum_f64_param_1];
	ld.param.u64 	%rd2, [reduce_sum_f64_param_2];
	cvta.to.global.u64 	%rd1, %rd3;
	mov.u32 	%r1, %ctaid.x;
	shl.b32 	%r10, %r1, 11;
	mov.u32 	%r2, %tid.x;
	add.s32 	%r41, %r10, %r2;
	setp.ge.u32 	%p1, %r41, %r9;
	mov.f64 	%fd34, 0d0000000000000000;
	@%p1 bra 	$L__BB5_5;

	mov.u32 	%r11, %nctaid.x;
	shl.b32 	%r4, %r11, 11;

$L__BB5_2:
	mul.wide.u32 	%rd4, %r41, 8;
	add.s64 	%rd5, %rd1, %rd4;
	ld.global.f64 	%fd17, [%rd5];
	add.f64 	%fd34, %fd34, %fd17;
	add.s32 	%r6, %r41, 1024;
	setp.ge.u32 	%p2, %r6, %r9;
	@%p2 bra 	$L__BB5_4;

	mul.wide.u32 	%rd6, %r6, 8;
	add.s64 	%rd7, %rd1, %rd6;
	ld.global.f64 	%fd18, [%rd7];
	add.f64 	%fd34, %fd34, %fd18;

$L__BB5_4:
	add.s32 	%r41, %r41, %r4;
	setp.lt.u32 	%p3, %r41, %r9;
	@%p3 bra 	$L__BB5_2;

$L__BB5_5:
	shl.b32 	%r12, %r2, 3;
	mov.u32 	%r13, shared_d;
	add.s32 	%r8, %r13, %r12;
	st.shared.f64 	[%r8], %fd34;
	bar.sync 	0;
	setp.gt.u32 	%p4, %r2, 511;
	@%p4 bra 	$L__BB5_7;

	ld.shared.f64 	%fd19, [%r8+4096];
	add.f64 	%fd34, %fd34, %fd19;
	st.shared.f64 	[%r8], %fd34;

$L__BB5_7:
	bar.sync 	0;
	setp.gt.u32 	%p5, %r2, 255;
	@%p5 bra 	$L__BB5_9;

	ld.shared.f64 	%fd20, [%r8+2048];
	add.f64 	%fd34, %fd34, %fd20;
	st.shared.f64 	[%r8], %fd34;

$L__BB5_9:
	bar.sync 	0;
	setp.gt.u32 	%p6, %r2, 127;
	@%p6 bra 	$L__BB5_11;

	ld.shared.f64 	%fd21, [%r8+1024];
	add.f64 	%fd34, %fd34, %fd21;
	st.shared.f64 	[%r8], %fd34;

$L__BB5_11:
	bar.sync 	0;
	setp.gt.u32 	%p7, %r2, 63;
	@%p7 bra 	$L__BB5_13;

	ld.shared.f64 	%fd22, [%r8+512];
	add.f64 	%fd34, %fd34, %fd22;
	st.shared.f64 	[%r8], %fd34;

$L__BB5_13:
	bar.sync 	0;
	setp.gt.u32 	%p8, %r2, 31;
	@%p8 bra 	$L__BB5_16;

	ld.shared.f64 	%fd33, [%r8+256];
	add.f64 	%fd23, %fd34, %fd33;
	// begin inline asm
	mov.b64 {%r14,%r15}, %fd23;
	// end inline asm
	mov.u32 	%r34, 2;
	mov.u32 	%r35, 31;
	mov.u32 	%r36, 16;
	mov.u32 	%r37, -1;
	shfl.sync.down.b32 	%r17|%p9, %r15, %r36, %r35, %r37;
	shfl.sync.down.b32 	%r16|%p10, %r14, %r36, %r35, %r37;
	// begin inline asm
	mov.b64 %fd24, {%r16,%r17};
	// end inline asm
	add.f64 	%fd25, %fd23, %fd24;
	// begin inline asm
	mov.b64 {%r18,%r19}, %fd25;
	// end inline asm
	mov.u32 	%r38, 8;
	shfl.sync.down.b32 	%r21|%p11, %r19, %r38, %r35, %r37;
	shfl.sync.down.b32 	%r20|%p12, %r18, %r38, %r35, %r37;
	// begin inline asm
	mov.b64 %fd26, {%r20,%r21};
	// end inline asm
	add.f64 	%fd27, %fd25, %fd26;
	// begin inline asm
	mov.b64 {%r22,%r23}, %fd27;
	// end inline asm
	mov.u32 	%r39, 4;
	shfl.sync.down.b32 	%r25|%p13, %r23, %r39, %r35, %r37;
	shfl.sync.down.b32 	%r24|%p14, %r22, %r39, %r35, %r37;
	// begin inline asm
	mov.b64 %fd28, {%r24,%r25};
	// end inline asm
	add.f64 	%fd29, %fd27, %fd28;
	// begin inline asm
	mov.b64 {%r26,%r27}, %fd29;
	// end inline asm
	shfl.sync.down.b32 	%r29|%p15, %r27, %r34, %r35, %r37;
	shfl.sync.down.b32 	%r28|%p16, %r26, %r34, %r35, %r37;
	// begin inline asm
	mov.b64 %fd30, {%r28,%r29};
	// end inline asm
	add.f64 	%fd31, %fd29, %fd30;
	// begin inline asm
	mov.b64 {%r30,%r31}, %fd31;
	// end inline asm
	mov.u32 	%r40, 1;
	shfl.sync.down.b32 	%r33|%p17, %r31, %r40, %r35, %r37;
	shfl.sync.down.b32 	%r32|%p18, %r30, %r40, %r35, %r37;
	// begin inline asm
	mov.b64 %fd32, {%r32,%r33};
	// end inline asm
	add.f64 	%fd14, %fd31, %fd32;
	setp.ne.s32 	%p19, %r2, 0;
	@%p19 bra 	$L__BB5_16;

	cvta.to.global.u64 	%rd8, %rd2;
	mul.wide.u32 	%rd9, %r1, 8;
	add.s64 	%rd10, %rd8, %rd9;
	st.global.f64 	[%rd10], %fd14;

$L__BB5_16:
	ret;

}
	// .globl	reduce_mul_i32
.visible .entry reduce_mul_i32(
	.param .u64 reduce_mul_i32_param_0,
	.param .u32 reduce_mul_i32_param_1,
	.param .u64 reduce_mul_i32_param_2
)
{
	.reg .pred 	%p<15>;
	.reg .b32 	%r<63>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd3, [reduce_mul_i32_param_0];
	ld.param.u32 	%r22, [reduce_mul_i32_param_1];
	ld.param.u64 	%rd2, [reduce_mul_i32_param_2];
	cvta.to.global.u64 	%rd1, %rd3;
	mov.u32 	%r24, %ctaid.x;
	shl.b32 	%r25, %r24, 11;
	mov.u32 	%r1, %tid.x;
	add.s32 	%r55, %r25, %r1;
	setp.ge.u32 	%p1, %r55, %r22;
	mov.u32 	%r56, 1;
	@%p1 bra 	$L__BB6_5;

	mov.u32 	%r27, %nctaid.x;
	shl.b32 	%r3, %r27, 11;

$L__BB6_2:
	mul.wide.u32 	%rd4, %r55, 4;
	add.s64 	%rd5, %rd1, %rd4;
	ld.global.u32 	%r28, [%rd5];
	mul.lo.s32 	%r56, %r28, %r56;
	add.s32 	%r7, %r55, 1024;
	setp.ge.u32 	%p2, %r7, %r22;
	@%p2 bra 	$L__BB6_4;

	mul.wide.u32 	%rd6, %r7, 4;
	add.s64 	%rd7, %rd1, %rd6;
	ld.global.u32 	%r29, [%rd7];
	mul.lo.s32 	%r56, %r29, %r56;

$L__BB6_4:
	add.s32 	%r55, %r55, %r3;
	setp.lt.u32 	%p3, %r55, %r22;
	@%p3 bra 	$L__BB6_2;

$L__BB6_5:
	shl.b32 	%r30, %r1, 2;
	mov.u32 	%r31, shared;
	add.s32 	%r12, %r31, %r30;
	st.shared.u32 	[%r12], %r56;
	bar.sync 	0;
	setp.gt.u32 	%p4, %r1, 511;
	@%p4 bra 	$L__BB6_7;

	ld.shared.u32 	%r32, [%r12+2048];
	mul.lo.s32 	%r56, %r32, %r56;
	st.shared.u32 	[%r12], %r56;

$L__BB6_7:
	bar.sync 	0;
	setp.gt.u32 	%p5, %r1, 255;
	@%p5 bra 	$L__BB6_9;

	ld.shared.u32 	%r33, [%r12+1024];
	mul.lo.s32 	%r56, %r33, %r56;
	st.shared.u32 	[%r12], %r56;

$L__BB6_9:
	bar.sync 	0;
	setp.gt.u32 	%p6, %r1, 127;
	@%p6 bra 	$L__BB6_11;

	ld.shared.u32 	%r34, [%r12+512];
	mul.lo.s32 	%r56, %r34, %r56;
	st.shared.u32 	[%r12], %r56;

$L__BB6_11:
	bar.sync 	0;
	setp.gt.u32 	%p7, %r1, 63;
	@%p7 bra 	$L__BB6_13;

	ld.shared.u32 	%r35, [%r12+256];
	mul.lo.s32 	%r56, %r35, %r56;
	st.shared.u32 	[%r12], %r56;

$L__BB6_13:
	bar.sync 	0;
	setp.gt.u32 	%p8, %r1, 31;
	@%p8 bra 	$L__BB6_16;

	ld.shared.u32 	%r36, [%r12+128];
	mul.lo.s32 	%r37, %r36, %r56;
	mov.u32 	%r38, 2;
	mov.u32 	%r39, 31;
	mov.u32 	%r40, 16;
	mov.u32 	%r41, -1;
	shfl.sync.down.b32 	%r42|%p9, %r37, %r40, %r39, %r41;
	mul.lo.s32 	%r43, %r42, %r37;
	mov.u32 	%r44, 8;
	shfl.sync.down.b32 	%r45|%p10, %r43, %r44, %r39, %r41;
	mul.lo.s32 	%r46, %r45, %r43;
	mov.u32 	%r47, 4;
	shfl.sync.down.b32 	%r48|%p11, %r46, %r47, %r39, %r41;
	mul.lo.s32 	%r49, %r48, %r46;
	shfl.sync.down.b32 	%r50|%p12, %r49, %r38, %r39, %r41;
	mul.lo.s32 	%r51, %r50, %r49;
	mov.u32 	%r52, 1;
	shfl.sync.down.b32 	%r53|%p13, %r51, %r52, %r39, %r41;
	mul.lo.s32 	%r21, %r53, %r51;
	setp.ne.s32 	%p14, %r1, 0;
	@%p14 bra 	$L__BB6_16;

	cvta.to.global.u64 	%rd8, %rd2;
	mul.wide.u32 	%rd9, %r24, 4;
	add.s64 	%rd10, %rd8, %rd9;
	st.global.u32 	[%rd10], %r21;

$L__BB6_16:
	ret;

}
	// .globl	reduce_mul_u32
.visible .entry reduce_mul_u32(
	.param .u64 reduce_mul_u32_param_0,
	.param .u32 reduce_mul_u32_param_1,
	.param .u64 reduce_mul_u32_param_2
)
{
	.reg .pred 	%p<15>;
	.reg .b32 	%r<63>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd3, [reduce_mul_u32_param_0];
	ld.param.u32 	%r22, [reduce_mul_u32_param_1];
	ld.param.u64 	%rd2, [reduce_mul_u32_param_2];
	cvta.to.global.u64 	%rd1, %rd3;
	mov.u32 	%r24, %ctaid.x;
	shl.b32 	%r25, %r24, 11;
	mov.u32 	%r1, %tid.x;
	add.s32 	%r55, %r25, %r1;
	setp.ge.u32 	%p1, %r55, %r22;
	mov.u32 	%r56, 1;
	@%p1 bra 	$L__BB7_5;

	mov.u32 	%r27, %nctaid.x;
	shl.b32 	%r3, %r27, 11;

$L__BB7_2:
	mul.wide.u32 	%rd4, %r55, 4;
	add.s64 	%rd5, %rd1, %rd4;
	ld.global.u32 	%r28, [%rd5];
	mul.lo.s32 	%r56, %r28, %r56;
	add.s32 	%r7, %r55, 1024;
	setp.ge.u32 	%p2, %r7, %r22;
	@%p2 bra 	$L__BB7_4;

	mul.wide.u32 	%rd6, %r7, 4;
	add.s64 	%rd7, %rd1, %rd6;
	ld.global.u32 	%r29, [%rd7];
	mul.lo.s32 	%r56, %r29, %r56;

$L__BB7_4:
	add.s32 	%r55, %r55, %r3;
	setp.lt.u32 	%p3, %r55, %r22;
	@%p3 bra 	$L__BB7_2;

$L__BB7_5:
	shl.b32 	%r30, %r1, 2;
	mov.u32 	%r31, shared;
	add.s32 	%r12, %r31, %r30;
	st.shared.u32 	[%r12], %r56;
	bar.sync 	0;
	setp.gt.u32 	%p4, %r1, 511;
	@%p4 bra 	$L__BB7_7;

	ld.shared.u32 	%r32, [%r12+2048];
	mul.lo.s32 	%r56, %r32, %r56;
	st.shared.u32 	[%r12], %r56;

$L__BB7_7:
	bar.sync 	0;
	setp.gt.u32 	%p5, %r1, 255;
	@%p5 bra 	$L__BB7_9;

	ld.shared.u32 	%r33, [%r12+1024];
	mul.lo.s32 	%r56, %r33, %r56;
	st.shared.u32 	[%r12], %r56;

$L__BB7_9:
	bar.sync 	0;
	setp.gt.u32 	%p6, %r1, 127;
	@%p6 bra 	$L__BB7_11;

	ld.shared.u32 	%r34, [%r12+512];
	mul.lo.s32 	%r56, %r34, %r56;
	st.shared.u32 	[%r12], %r56;

$L__BB7_11:
	bar.sync 	0;
	setp.gt.u32 	%p7, %r1, 63;
	@%p7 bra 	$L__BB7_13;

	ld.shared.u32 	%r35, [%r12+256];
	mul.lo.s32 	%r56, %r35, %r56;
	st.shared.u32 	[%r12], %r56;

$L__BB7_13:
	bar.sync 	0;
	setp.gt.u32 	%p8, %r1, 31;
	@%p8 bra 	$L__BB7_16;

	ld.shared.u32 	%r36, [%r12+128];
	mul.lo.s32 	%r37, %r36, %r56;
	mov.u32 	%r38, 2;
	mov.u32 	%r39, 31;
	mov.u32 	%r40, 16;
	mov.u32 	%r41, -1;
	shfl.sync.down.b32 	%r42|%p9, %r37, %r40, %r39, %r41;
	mul.lo.s32 	%r43, %r42, %r37;
	mov.u32 	%r44, 8;
	shfl.sync.down.b32 	%r45|%p10, %r43, %r44, %r39, %r41;
	mul.lo.s32 	%r46, %r45, %r43;
	mov.u32 	%r47, 4;
	shfl.sync.down.b32 	%r48|%p11, %r46, %r47, %r39, %r41;
	mul.lo.s32 	%r49, %r48, %r46;
	shfl.sync.down.b32 	%r50|%p12, %r49, %r38, %r39, %r41;
	mul.lo.s32 	%r51, %r50, %r49;
	mov.u32 	%r52, 1;
	shfl.sync.down.b32 	%r53|%p13, %r51, %r52, %r39, %r41;
	mul.lo.s32 	%r21, %r53, %r51;
	setp.ne.s32 	%p14, %r1, 0;
	@%p14 bra 	$L__BB7_16;

	cvta.to.global.u64 	%rd8, %rd2;
	mul.wide.u32 	%rd9, %r24, 4;
	add.s64 	%rd10, %rd8, %rd9;
	st.global.u32 	[%rd10], %r21;

$L__BB7_16:
	ret;

}
	// .globl	reduce_mul_i64
.visible .entry reduce_mul_i64(
	.param .u64 reduce_mul_i64_param_0,
	.param .u32 reduce_mul_i64_param_1,
	.param .u64 reduce_mul_i64_param_2
)
{
	.reg .pred 	%p<20>;
	.reg .b32 	%r<42>;
	.reg .b64 	%rd<51>;


	ld.param.u64 	%rd18, [reduce_mul_i64_param_0];
	ld.param.u32 	%r9, [reduce_mul_i64_param_1];
	ld.param.u64 	%rd16, [reduce_mul_i64_param_2];
	cvta.to.global.u64 	%rd1, %rd18;
	mov.u32 	%r1, %ctaid.x;
	shl.b32 	%r10, %r1, 11;
	mov.u32 	%r2, %tid.x;
	add.s32 	%r41, %r10, %r2;
	setp.ge.u32 	%p1, %r41, %r9;
	mov.u64 	%rd44, 1;
	@%p1 bra 	$L__BB8_5;

	mov.u32 	%r11, %nctaid.x;
	shl.b32 	%r4, %r11, 11;

$L__BB8_2:
	mul.wide.u32 	%rd20, %r41, 8;
	add.s64 	%rd21, %rd1, %rd20;
	ld.global.u64 	%rd22, [%rd21];
	mul.lo.s64 	%rd44, %rd22, %rd44;
	add.s32 	%r6, %r41, 1024;
	setp.ge.u32 	%p2, %r6, %r9;
	@%p2 bra 	$L__BB8_4;

	mul.wide.u32 	%rd23, %r6, 8;
	add.s64 	%rd24, %rd1, %rd23;
	ld.global.u64 	%rd25, [%rd24];
	mul.lo.s64 	%rd44, %rd25, %rd44;

$L__BB8_4:
	add.s32 	%r41, %r41, %r4;
	setp.lt.u32 	%p3, %r41, %r9;
	@%p3 bra 	$L__BB8_2;

$L__BB8_5:
	shl.b32 	%r12, %r2, 3;
	mov.u32 	%r13, shared;
	add.s32 	%r8, %r13, %r12;
	st.shared.u64 	[%r8], %rd44;
	bar.sync 	0;
	setp.gt.u32 	%p4, %r2, 511;
	@%p4 bra 	$L__BB8_7;

	ld.shared.u64 	%rd26, [%r8+4096];
	mul.lo.s64 	%rd44, %rd26, %rd44;
	st.shared.u64 	[%r8], %rd44;

$L__BB8_7:
	bar.sync 	0;
	setp.gt.u32 	%p5, %r2, 255;
	@%p5 bra 	$L__BB8_9;

	ld.shared.u64 	%rd27, [%r8+2048];
	mul.lo.s64 	%rd44, %rd27, %rd44;
	st.shared.u64 	[%r8], %rd44;

$L__BB8_9:
	bar.sync 	0;
	setp.gt.u32 	%p6, %r2, 127;
	@%p6 bra 	$L__BB8_11;

	ld.shared.u64 	%rd28, [%r8+1024];
	mul.lo.s64 	%rd44, %rd28, %rd44;
	st.shared.u64 	[%r8], %rd44;

$L__BB8_11:
	bar.sync 	0;
	setp.gt.u32 	%p7, %r2, 63;
	@%p7 bra 	$L__BB8_13;

	ld.shared.u64 	%rd29, [%r8+512];
	mul.lo.s64 	%rd44, %rd29, %rd44;
	st.shared.u64 	[%r8], %rd44;

$L__BB8_13:
	bar.sync 	0;
	setp.gt.u32 	%p8, %r2, 31;
	@%p8 bra 	$L__BB8_16;

	ld.shared.u64 	%rd40, [%r8+256];
	mul.lo.s64 	%rd30, %rd40, %rd44;
	// begin inline asm
	mov.b64 {%r14,%r15}, %rd30;
	// end inline asm
	mov.u32 	%r34, 2;
	mov.u32 	%r35, 31;
	mov.u32 	%r36, 16;
	mov.u32 	%r37, -1;
	shfl.sync.down.b32 	%r17|%p9, %r15, %r36, %r35, %r37;
	shfl.sync.down.b32 	%r16|%p10, %r14, %r36, %r35, %r37;
	// begin inline asm
	mov.b64 %rd31, {%r16,%r17};
	// end inline asm
	mul.lo.s64 	%rd32, %rd31, %rd30;
	// begin inline asm
	mov.b64 {%r18,%r19}, %rd32;
	// end inline asm
	mov.u32 	%r38, 8;
	shfl.sync.down.b32 	%r21|%p11, %r19, %r38, %r35, %r37;
	shfl.sync.down.b32 	%r20|%p12, %r18, %r38, %r35, %r37;
	// begin inline asm
	mov.b64 %rd33, {%r20,%r21};
	// end inline asm
	mul.lo.s64 	%rd34, %rd33, %rd32;
	// begin inline asm
	mov.b64 {%r22,%r23}, %rd34;
	// end inline asm
	mov.u32 	%r39, 4;
	shfl.sync.down.b32 	%r25|%p13, %r23, %r39, %r35, %r37;
	shfl.sync.down.b32 	%r24|%p14, %r22, %r39, %r35, %r37;
	// begin inline asm
	mov.b64 %rd35, {%r24,%r25};
	// end inline asm
	mul.lo.s64 	%rd36, %rd35, %rd34;
	// begin inline asm
	mov.b64 {%r26,%r27}, %rd36;
	// end inline asm
	shfl.sync.down.b32 	%r29|%p15, %r27, %r34, %r35, %r37;
	shfl.sync.down.b32 	%r28|%p16, %r26, %r34, %r35, %r37;
	// begin inline asm
	mov.b64 %rd37, {%r28,%r29};
	// end inline asm
	mul.lo.s64 	%rd38, %rd37, %rd36;
	// begin inline asm
	mov.b64 {%r30,%r31}, %rd38;
	// end inline asm
	mov.u32 	%r40, 1;
	shfl.sync.down.b32 	%r33|%p17, %r31, %r40, %r35, %r37;
	shfl.sync.down.b32 	%r32|%p18, %r30, %r40, %r35, %r37;
	// begin inline asm
	mov.b64 %rd39, {%r32,%r33};
	// end inline asm
	mul.lo.s64 	%rd15, %rd39, %rd38;
	setp.ne.s32 	%p19, %r2, 0;
	@%p19 bra 	$L__BB8_16;

	cvta.to.global.u64 	%rd41, %rd16;
	mul.wide.u32 	%rd42, %r1, 8;
	add.s64 	%rd43, %rd41, %rd42;
	st.global.u64 	[%rd43], %rd15;

$L__BB8_16:
	ret;

}
	// .globl	reduce_mul_u64
.visible .entry reduce_mul_u64(
	.param .u64 reduce_mul_u64_param_0,
	.param .u32 reduce_mul_u64_param_1,
	.param .u64 reduce_mul_u64_param_2
)
{
	.reg .pred 	%p<20>;
	.reg .b32 	%r<42>;
	.reg .b64 	%rd<51>;


	ld.param.u64 	%rd18, [reduce_mul_u64_param_0];
	ld.param.u32 	%r9, [reduce_mul_u64_param_1];
	ld.param.u64 	%rd16, [reduce_mul_u64_param_2];
	cvta.to.global.u64 	%rd1, %rd18;
	mov.u32 	%r1, %ctaid.x;
	shl.b32 	%r10, %r1, 11;
	mov.u32 	%r2, %tid.x;
	add.s32 	%r41, %r10, %r2;
	setp.ge.u32 	%p1, %r41, %r9;
	mov.u64 	%rd44, 1;
	@%p1 bra 	$L__BB9_5;

	mov.u32 	%r11, %nctaid.x;
	shl.b32 	%r4, %r11, 11;

$L__BB9_2:
	mul.wide.u32 	%rd20, %r41, 8;
	add.s64 	%rd21, %rd1, %rd20;
	ld.global.u64 	%rd22, [%rd21];
	mul.lo.s64 	%rd44, %rd22, %rd44;
	add.s32 	%r6, %r41, 1024;
	setp.ge.u32 	%p2, %r6, %r9;
	@%p2 bra 	$L__BB9_4;

	mul.wide.u32 	%rd23, %r6, 8;
	add.s64 	%rd24, %rd1, %rd23;
	ld.global.u64 	%rd25, [%rd24];
	mul.lo.s64 	%rd44, %rd25, %rd44;

$L__BB9_4:
	add.s32 	%r41, %r41, %r4;
	setp.lt.u32 	%p3, %r41, %r9;
	@%p3 bra 	$L__BB9_2;

$L__BB9_5:
	shl.b32 	%r12, %r2, 3;
	mov.u32 	%r13, shared;
	add.s32 	%r8, %r13, %r12;
	st.shared.u64 	[%r8], %rd44;
	bar.sync 	0;
	setp.gt.u32 	%p4, %r2, 511;
	@%p4 bra 	$L__BB9_7;

	ld.shared.u64 	%rd26, [%r8+4096];
	mul.lo.s64 	%rd44, %rd26, %rd44;
	st.shared.u64 	[%r8], %rd44;

$L__BB9_7:
	bar.sync 	0;
	setp.gt.u32 	%p5, %r2, 255;
	@%p5 bra 	$L__BB9_9;

	ld.shared.u64 	%rd27, [%r8+2048];
	mul.lo.s64 	%rd44, %rd27, %rd44;
	st.shared.u64 	[%r8], %rd44;

$L__BB9_9:
	bar.sync 	0;
	setp.gt.u32 	%p6, %r2, 127;
	@%p6 bra 	$L__BB9_11;

	ld.shared.u64 	%rd28, [%r8+1024];
	mul.lo.s64 	%rd44, %rd28, %rd44;
	st.shared.u64 	[%r8], %rd44;

$L__BB9_11:
	bar.sync 	0;
	setp.gt.u32 	%p7, %r2, 63;
	@%p7 bra 	$L__BB9_13;

	ld.shared.u64 	%rd29, [%r8+512];
	mul.lo.s64 	%rd44, %rd29, %rd44;
	st.shared.u64 	[%r8], %rd44;

$L__BB9_13:
	bar.sync 	0;
	setp.gt.u32 	%p8, %r2, 31;
	@%p8 bra 	$L__BB9_16;

	ld.shared.u64 	%rd40, [%r8+256];
	mul.lo.s64 	%rd30, %rd40, %rd44;
	// begin inline asm
	mov.b64 {%r14,%r15}, %rd30;
	// end inline asm
	mov.u32 	%r34, 2;
	mov.u32 	%r35, 31;
	mov.u32 	%r36, 16;
	mov.u32 	%r37, -1;
	shfl.sync.down.b32 	%r17|%p9, %r15, %r36, %r35, %r37;
	shfl.sync.down.b32 	%r16|%p10, %r14, %r36, %r35, %r37;
	// begin inline asm
	mov.b64 %rd31, {%r16,%r17};
	// end inline asm
	mul.lo.s64 	%rd32, %rd31, %rd30;
	// begin inline asm
	mov.b64 {%r18,%r19}, %rd32;
	// end inline asm
	mov.u32 	%r38, 8;
	shfl.sync.down.b32 	%r21|%p11, %r19, %r38, %r35, %r37;
	shfl.sync.down.b32 	%r20|%p12, %r18, %r38, %r35, %r37;
	// begin inline asm
	mov.b64 %rd33, {%r20,%r21};
	// end inline asm
	mul.lo.s64 	%rd34, %rd33, %rd32;
	// begin inline asm
	mov.b64 {%r22,%r23}, %rd34;
	// end inline asm
	mov.u32 	%r39, 4;
	shfl.sync.down.b32 	%r25|%p13, %r23, %r39, %r35, %r37;
	shfl.sync.down.b32 	%r24|%p14, %r22, %r39, %r35, %r37;
	// begin inline asm
	mov.b64 %rd35, {%r24,%r25};
	// end inline asm
	mul.lo.s64 	%rd36, %rd35, %rd34;
	// begin inline asm
	mov.b64 {%r26,%r27}, %rd36;
	// end inline asm
	shfl.sync.down.b32 	%r29|%p15, %r27, %r34, %r35, %r37;
	shfl.sync.down.b32 	%r28|%p16, %r26, %r34, %r35, %r37;
	// begin inline asm
	mov.b64 %rd37, {%r28,%r29};
	// end inline asm
	mul.lo.s64 	%rd38, %rd37, %rd36;
	// begin inline asm
	mov.b64 {%r30,%r31}, %rd38;
	// end inline asm
	mov.u32 	%r40, 1;
	shfl.sync.down.b32 	%r33|%p17, %r31, %r40, %r35, %r37;
	shfl.sync.down.b32 	%r32|%p18, %r30, %r40, %r35, %r37;
	// begin inline asm
	mov.b64 %rd39, {%r32,%r33};
	// end inline asm
	mul.lo.s64 	%rd15, %rd39, %rd38;
	setp.ne.s32 	%p19, %r2, 0;
	@%p19 bra 	$L__BB9_16;

	cvta.to.global.u64 	%rd41, %rd16;
	mul.wide.u32 	%rd42, %r1, 8;
	add.s64 	%rd43, %rd41, %rd42;
	st.global.u64 	[%rd43], %rd15;

$L__BB9_16:
	ret;

}
	// .globl	reduce_mul_f32
.visible .entry reduce_mul_f32(
	.param .u64 reduce_mul_f32_param_0,
	.param .u32 reduce_mul_f32_param_1,
	.param .u64 reduce_mul_f32_param_2
)
{
	.reg .pred 	%p<15>;
	.reg .f32 	%f<41>;
	.reg .b32 	%r<33>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd3, [reduce_mul_f32_param_0];
	ld.param.u32 	%r8, [reduce_mul_f32_param_1];
	ld.param.u64 	%rd2, [reduce_mul_f32_param_2];
	cvta.to.global.u64 	%rd1, %rd3;
	mov.u32 	%r9, %ctaid.x;
	shl.b32 	%r10, %r9, 11;
	mov.u32 	%r1, %tid.x;
	add.s32 	%r32, %r10, %r1;
	setp.ge.u32 	%p1, %r32, %r8;
	mov.f32 	%f34, 0f3F800000;
	@%p1 bra 	$L__BB10_5;

	mov.u32 	%r11, %nctaid.x;
	shl.b32 	%r3, %r11, 11;

$L__BB10_2:
	mul.wide.u32 	%rd4, %r32, 4;
	add.s64 	%rd5, %rd1, %rd4;
	ld.global.f32 	%f17, [%rd5];
	mul.f32 	%f34, %f34, %f17;
	add.s32 	%r5, %r32, 1024;
	setp.ge.u32 	%p2, %r5, %r8;
	@%p2 bra 	$L__BB10_4;

	mul.wide.u32 	%rd6, %r5, 4;
	add.s64 	%rd7, %rd1, %rd6;
	ld.global.f32 	%f18, [%rd7];
	mul.f32 	%f34, %f34, %f18;

$L__BB10_4:
	add.s32 	%r32, %r32, %r3;
	setp.lt.u32 	%p3, %r32, %r8;
	@%p3 bra 	$L__BB10_2;

$L__BB10_5:
	shl.b32 	%r12, %r1, 2;
	mov.u32 	%r13, shared;
	add.s32 	%r7, %r13, %r12;
	st.shared.f32 	[%r7], %f34;
	bar.sync 	0;
	setp.gt.u32 	%p4, %r1, 511;
	@%p4 bra 	$L__BB10_7;

	ld.shared.f32 	%f19, [%r7+2048];
	mul.f32 	%f34, %f34, %f19;
	st.shared.f32 	[%r7], %f34;

$L__BB10_7:
	bar.sync 	0;
	setp.gt.u32 	%p5, %r1, 255;
	@%p5 bra 	$L__BB10_9;

	ld.shared.f32 	%f20, [%r7+1024];
	mul.f32 	%f34, %f34, %f20;
	st.shared.f32 	[%r7], %f34;

$L__BB10_9:
	bar.sync 	0;
	setp.gt.u32 	%p6, %r1, 127;
	@%p6 bra 	$L__BB10_11;

	ld.shared.f32 	%f21, [%r7+512];
	mul.f32 	%f34, %f34, %f21;
	st.shared.f32 	[%r7], %f34;

$L__BB10_11:
	bar.sync 	0;
	setp.gt.u32 	%p7, %r1, 63;
	@%p7 bra 	$L__BB10_13;

	ld.shared.f32 	%f22, [%r7+256];
	mul.f32 	%f34, %f34, %f22;
	st.shared.f32 	[%r7], %f34;

$L__BB10_13:
	bar.sync 	0;
	setp.gt.u32 	%p8, %r1, 31;
	@%p8 bra 	$L__BB10_16;

	ld.shared.f32 	%f23, [%r7+128];
	mul.f32 	%f24, %f34, %f23;
	mov.b32 	%r14, %f24;
	mov.u32 	%r15, 2;
	mov.u32 	%r16, 31;
	mov.u32 	%r17, 16;
	mov.u32 	%r18, -1;
	shfl.sync.down.b32 	%r19|%p9, %r14, %r17, %r16, %r18;
	mov.b32 	%f25, %r19;
	mul.f32 	%f26, %f24, %f25;
	mov.b32 	%r20, %f26;
	mov.u32 	%r21, 8;
	shfl.sync.down.b32 	%r22|%p10, %r20, %r21, %r16, %r18;
	mov.b32 	%f27, %r22;
	mul.f32 	%f28, %f26, %f27;
	mov.b32 	%r23, %f28;
	mov.u32 	%r24, 4;
	shfl.sync.down.b32 	%r25|%p11, %r23, %r24, %r16, %r18;
	mov.b32 	%f29, %r25;
	mul.f32 	%f30, %f28, %f29;
	mov.b32 	%r26, %f30;
	shfl.sync.down.b32 	%r27|%p12, %r26, %r15, %r16, %r18;
	mov.b32 	%f31, %r27;
	mul.f32 	%f32, %f30, %f31;
	mov.b32 	%r28, %f32;
	mov.u32 	%r29, 1;
	shfl.sync.down.b32 	%r30|%p13, %r28, %r29, %r16, %r18;
	mov.b32 	%f33, %r30;
	mul.f32 	%f14, %f32, %f33;
	setp.ne.s32 	%p14, %r1, 0;
	@%p14 bra 	$L__BB10_16;

	cvta.to.global.u64 	%rd8, %rd2;
	mul.wide.u32 	%rd9, %r9, 4;
	add.s64 	%rd10, %rd8, %rd9;
	st.global.f32 	[%rd10], %f14;

$L__BB10_16:
	ret;

}
	// .globl	reduce_mul_f64
.visible .entry reduce_mul_f64(
	.param .u64 reduce_mul_f64_param_0,
	.param .u32 reduce_mul_f64_param_1,
	.param .u64 reduce_mul_f64_param_2
)
{
	.reg .pred 	%p<20>;
	.reg .b32 	%r<42>;
	.reg .f64 	%fd<41>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd3, [reduce_mul_f64_param_0];
	ld.param.u32 	%r9, [reduce_mul_f64_param_1];
	ld.param.u64 	%rd2, [reduce_mul_f64_param_2];
	cvta.to.global.u64 	%rd1, %rd3;
	mov.u32 	%r1, %ctaid.x;
	shl.b32 	%r10, %r1, 11;
	mov.u32 	%r2, %tid.x;
	add.s32 	%r41, %r10, %r2;
	setp.ge.u32 	%p1, %r41, %r9;
	mov.f64 	%fd34, 0d3FF0000000000000;
	@%p1 bra 	$L__BB11_5;

	mov.u32 	%r11, %nctaid.x;
	shl.b32 	%r4, %r11, 11;

$L__BB11_2:
	mul.wide.u32 	%rd4, %r41, 8;
	add.s64 	%rd5, %rd1, %rd4;
	ld.global.f64 	%fd17, [%rd5];
	mul.f64 	%fd34, %fd34, %fd17;
	add.s32 	%r6, %r41, 1024;
	setp.ge.u32 	%p2, %r6, %r9;
	@%p2 bra 	$L__BB11_4;

	mul.wide.u32 	%rd6, %r6, 8;
	add.s64 	%rd7, %rd1, %rd6;
	ld.global.f64 	%fd18, [%rd7];
	mul.f64 	%fd34, %fd34, %fd18;

$L__BB11_4:
	add.s32 	%r41, %r41, %r4;
	setp.lt.u32 	%p3, %r41, %r9;
	@%p3 bra 	$L__BB11_2;

$L__BB11_5:
	shl.b32 	%r12, %r2, 3;
	mov.u32 	%r13, shared_d;
	add.s32 	%r8, %r13, %r12;
	st.shared.f64 	[%r8], %fd34;
	bar.sync 	0;
	setp.gt.u32 	%p4, %r2, 511;
	@%p4 bra 	$L__BB11_7;

	ld.shared.f64 	%fd19, [%r8+4096];
	mul.f64 	%fd34, %fd34, %fd19;
	st.shared.f64 	[%r8], %fd34;

$L__BB11_7:
	bar.sync 	0;
	setp.gt.u32 	%p5, %r2, 255;
	@%p5 bra 	$L__BB11_9;

	ld.shared.f64 	%fd20, [%r8+2048];
	mul.f64 	%fd34, %fd34, %fd20;
	st.shared.f64 	[%r8], %fd34;

$L__BB11_9:
	bar.sync 	0;
	setp.gt.u32 	%p6, %r2, 127;
	@%p6 bra 	$L__BB11_11;

	ld.shared.f64 	%fd21, [%r8+1024];
	mul.f64 	%fd34, %fd34, %fd21;
	st.shared.f64 	[%r8], %fd34;

$L__BB11_11:
	bar.sync 	0;
	setp.gt.u32 	%p7, %r2, 63;
	@%p7 bra 	$L__BB11_13;

	ld.shared.f64 	%fd22, [%r8+512];
	mul.f64 	%fd34, %fd34, %fd22;
	st.shared.f64 	[%r8], %fd34;

$L__BB11_13:
	bar.sync 	0;
	setp.gt.u32 	%p8, %r2, 31;
	@%p8 bra 	$L__BB11_16;

	ld.shared.f64 	%fd33, [%r8+256];
	mul.f64 	%fd23, %fd34, %fd33;
	// begin inline asm
	mov.b64 {%r14,%r15}, %fd23;
	// end inline asm
	mov.u32 	%r34, 2;
	mov.u32 	%r35, 31;
	mov.u32 	%r36, 16;
	mov.u32 	%r37, -1;
	shfl.sync.down.b32 	%r17|%p9, %r15, %r36, %r35, %r37;
	shfl.sync.down.b32 	%r16|%p10, %r14, %r36, %r35, %r37;
	// begin inline asm
	mov.b64 %fd24, {%r16,%r17};
	// end inline asm
	mul.f64 	%fd25, %fd23, %fd24;
	// begin inline asm
	mov.b64 {%r18,%r19}, %fd25;
	// end inline asm
	mov.u32 	%r38, 8;
	shfl.sync.down.b32 	%r21|%p11, %r19, %r38, %r35, %r37;
	shfl.sync.down.b32 	%r20|%p12, %r18, %r38, %r35, %r37;
	// begin inline asm
	mov.b64 %fd26, {%r20,%r21};
	// end inline asm
	mul.f64 	%fd27, %fd25, %fd26;
	// begin inline asm
	mov.b64 {%r22,%r23}, %fd27;
	// end inline asm
	mov.u32 	%r39, 4;
	shfl.sync.down.b32 	%r25|%p13, %r23, %r39, %r35, %r37;
	shfl.sync.down.b32 	%r24|%p14, %r22, %r39, %r35, %r37;
	// begin inline asm
	mov.b64 %fd28, {%r24,%r25};
	// end inline asm
	mul.f64 	%fd29, %fd27, %fd28;
	// begin inline asm
	mov.b64 {%r26,%r27}, %fd29;
	// end inline asm
	shfl.sync.down.b32 	%r29|%p15, %r27, %r34, %r35, %r37;
	shfl.sync.down.b32 	%r28|%p16, %r26, %r34, %r35, %r37;
	// begin inline asm
	mov.b64 %fd30, {%r28,%r29};
	// end inline asm
	mul.f64 	%fd31, %fd29, %fd30;
	// begin inline asm
	mov.b64 {%r30,%r31}, %fd31;
	// end inline asm
	mov.u32 	%r40, 1;
	shfl.sync.down.b32 	%r33|%p17, %r31, %r40, %r35, %r37;
	shfl.sync.down.b32 	%r32|%p18, %r30, %r40, %r35, %r37;
	// begin inline asm
	mov.b64 %fd32, {%r32,%r33};
	// end inline asm
	mul.f64 	%fd14, %fd31, %fd32;
	setp.ne.s32 	%p19, %r2, 0;
	@%p19 bra 	$L__BB11_16;

	cvta.to.global.u64 	%rd8, %rd2;
	mul.wide.u32 	%rd9, %r1, 8;
	add.s64 	%rd10, %rd8, %rd9;
	st.global.f64 	[%rd10], %fd14;

$L__BB11_16:
	ret;

}
	// .globl	reduce_min_i32
.visible .entry reduce_min_i32(
	.param .u64 reduce_min_i32_param_0,
	.param .u32 reduce_min_i32_param_1,
	.param .u64 reduce_min_i32_param_2
)
{
	.reg .pred 	%p<15>;
	.reg .b32 	%r<62>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd3, [reduce_min_i32_param_0];
	ld.param.u32 	%r23, [reduce_min_i32_param_1];
	ld.param.u64 	%rd2, [reduce_min_i32_param_2];
	cvta.to.global.u64 	%rd1, %rd3;
	mov.u32 	%r1, %ctaid.x;
	shl.b32 	%r25, %r1, 11;
	mov.u32 	%r2, %tid.x;
	add.s32 	%r54, %r25, %r2;
	setp.ge.u32 	%p1, %r54, %r23;
	mov.u32 	%r55, 2147483647;
	@%p1 bra 	$L__BB12_5;

	mov.u32 	%r27, %nctaid.x;
	shl.b32 	%r4, %r27, 11;

$L__BB12_2:
	mul.wide.u32 	%rd4, %r54, 4;
	add.s64 	%rd5, %rd1, %rd4;
	ld.global.u32 	%r28, [%rd5];
	min.s32 	%r55, %r55, %r28;
	add.s32 	%r8, %r54, 1024;
	setp.ge.u32 	%p2, %r8, %r23;
	@%p2 bra 	$L__BB12_4;

	mul.wide.u32 	%rd6, %r8, 4;
	add.s64 	%rd7, %rd1, %rd6;
	ld.global.u32 	%r29, [%rd7];
	min.s32 	%r55, %r55, %r29;

$L__BB12_4:
	add.s32 	%r54, %r54, %r4;
	setp.lt.u32 	%p3, %r54, %r23;
	@%p3 bra 	$L__BB12_2;

$L__BB12_5:
	shl.b32 	%r30, %r2, 2;
	mov.u32 	%r31, shared;
	add.s32 	%r13, %r31, %r30;
	st.shared.u32 	[%r13], %r55;
	bar.sync 	0;
	setp.gt.u32 	%p4, %r2, 511;
	@%p4 bra 	$L__BB12_7;

	ld.shared.u32 	%r32, [%r13+2048];
	min.s32 	%r55, %r55, %r32;
	st.shared.u32 	[%r13], %r55;

$L__BB12_7:
	bar.sync 	0;
	setp.gt.u32 	%p5, %r2, 255;
	@%p5 bra 	$L__BB12_9;

	ld.shared.u32 	%r33, [%r13+1024];
	min.s32 	%r55, %r55, %r33;
	st.shared.u32 	[%r13], %r55;

$L__BB12_9:
	bar.sync 	0;
	setp.gt.u32 	%p6, %r2, 127;
	@%p6 bra 	$L__BB12_11;

	ld.shared.u32 	%r34, [%r13+512];
	min.s32 	%r55, %r55, %r34;
	st.shared.u32 	[%r13], %r55;

$L__BB12_11:
	bar.sync 	0;
	setp.gt.u32 	%p7, %r2, 63;
	@%p7 bra 	$L__BB12_13;

	ld.shared.u32 	%r35, [%r13+256];
	min.s32 	%r55, %r55, %r35;
	st.shared.u32 	[%r13], %r55;

$L__BB12_13:
	bar.sync 	0;
	setp.gt.u32 	%p8, %r2, 31;
	@%p8 bra 	$L__BB12_16;

	ld.shared.u32 	%r36, [%r13+128];
	min.s32 	%r37, %r55, %r36;
	mov.u32 	%r38, 2;
	mov.u32 	%r39, 31;
	mov.u32 	%r40, 16;
	mov.u32 	%r41, -1;
	shfl.sync.down.b32 	%r42|%p9, %r37, %r40, %r39, %r41;
	min.s32 	%r43, %r37, %r42;
	mov.u32 	%r44, 8;
	shfl.sync.down.b32 	%r45|%p10, %r43, %r44, %r39, %r41;
	min.s32 	%r46, %r43, %r45;
	mov.u32 	%r47, 4;
	shfl.sync.down.b32 	%r48|%p11, %r46, %r47, %r39, %r41;
	min.s32 	%r49, %r46, %r48;
	shfl.sync.down.b32 	%r50|%p12, %r49, %r38, %r39, %r41;
	min.s32 	%r51, %r49, %r50;
	mov.u32 	%r52, 1;
	shfl.sync.down.b32 	%r53|%p13, %r51, %r52, %r39, %r41;
	min.s32 	%r22, %r51, %r53;
	setp.ne.s32 	%p14, %r2, 0;
	@%p14 bra 	$L__BB12_16;

	cvta.to.global.u64 	%rd8, %rd2;
	mul.wide.u32 	%rd9, %r1, 4;
	add.s64 	%rd10, %rd8, %rd9;
	st.global.u32 	[%rd10], %r22;

$L__BB12_16:
	ret;

}
	// .globl	reduce_min_u32
.visible .entry reduce_min_u32(
	.param .u64 reduce_min_u32_param_0,
	.param .u32 reduce_min_u32_param_1,
	.param .u64 reduce_min_u32_param_2
)
{
	.reg .pred 	%p<15>;
	.reg .b32 	%r<62>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd3, [reduce_min_u32_param_0];
	ld.param.u32 	%r23, [reduce_min_u32_param_1];
	ld.param.u64 	%rd2, [reduce_min_u32_param_2];
	cvta.to.global.u64 	%rd1, %rd3;
	mov.u32 	%r1, %ctaid.x;
	shl.b32 	%r25, %r1, 11;
	mov.u32 	%r2, %tid.x;
	add.s32 	%r54, %r25, %r2;
	setp.ge.u32 	%p1, %r54, %r23;
	mov.u32 	%r55, -1;
	@%p1 bra 	$L__BB13_5;

	mov.u32 	%r27, %nctaid.x;
	shl.b32 	%r4, %r27, 11;

$L__BB13_2:
	mul.wide.u32 	%rd4, %r54, 4;
	add.s64 	%rd5, %rd1, %rd4;
	ld.global.u32 	%r28, [%rd5];
	min.u32 	%r55, %r55, %r28;
	add.s32 	%r8, %r54, 1024;
	setp.ge.u32 	%p2, %r8, %r23;
	@%p2 bra 	$L__BB13_4;

	mul.wide.u32 	%rd6, %r8, 4;
	add.s64 	%rd7, %rd1, %rd6;
	ld.global.u32 	%r29, [%rd7];
	min.u32 	%r55, %r55, %r29;

$L__BB13_4:
	add.s32 	%r54, %r54, %r4;
	setp.lt.u32 	%p3, %r54, %r23;
	@%p3 bra 	$L__BB13_2;

$L__BB13_5:
	shl.b32 	%r30, %r2, 2;
	mov.u32 	%r31, shared;
	add.s32 	%r13, %r31, %r30;
	st.shared.u32 	[%r13], %r55;
	bar.sync 	0;
	setp.gt.u32 	%p4, %r2, 511;
	@%p4 bra 	$L__BB13_7;

	ld.shared.u32 	%r32, [%r13+2048];
	min.u32 	%r55, %r55, %r32;
	st.shared.u32 	[%r13], %r55;

$L__BB13_7:
	bar.sync 	0;
	setp.gt.u32 	%p5, %r2, 255;
	@%p5 bra 	$L__BB13_9;

	ld.shared.u32 	%r33, [%r13+1024];
	min.u32 	%r55, %r55, %r33;
	st.shared.u32 	[%r13], %r55;

$L__BB13_9:
	bar.sync 	0;
	setp.gt.u32 	%p6, %r2, 127;
	@%p6 bra 	$L__BB13_11;

	ld.shared.u32 	%r34, [%r13+512];
	min.u32 	%r55, %r55, %r34;
	st.shared.u32 	[%r13], %r55;

$L__BB13_11:
	bar.sync 	0;
	setp.gt.u32 	%p7, %r2, 63;
	@%p7 bra 	$L__BB13_13;

	ld.shared.u32 	%r35, [%r13+256];
	min.u32 	%r55, %r55, %r35;
	st.shared.u32 	[%r13], %r55;

$L__BB13_13:
	bar.sync 	0;
	setp.gt.u32 	%p8, %r2, 31;
	@%p8 bra 	$L__BB13_16;

	ld.shared.u32 	%r36, [%r13+128];
	min.u32 	%r37, %r55, %r36;
	mov.u32 	%r38, 2;
	mov.u32 	%r39, 31;
	mov.u32 	%r40, 16;
	mov.u32 	%r41, -1;
	shfl.sync.down.b32 	%r42|%p9, %r37, %r40, %r39, %r41;
	min.u32 	%r43, %r37, %r42;
	mov.u32 	%r44, 8;
	shfl.sync.down.b32 	%r45|%p10, %r43, %r44, %r39, %r41;
	min.u32 	%r46, %r43, %r45;
	mov.u32 	%r47, 4;
	shfl.sync.down.b32 	%r48|%p11, %r46, %r47, %r39, %r41;
	min.u32 	%r49, %r46, %r48;
	shfl.sync.down.b32 	%r50|%p12, %r49, %r38, %r39, %r41;
	min.u32 	%r51, %r49, %r50;
	mov.u32 	%r52, 1;
	shfl.sync.down.b32 	%r53|%p13, %r51, %r52, %r39, %r41;
	min.u32 	%r22, %r51, %r53;
	setp.ne.s32 	%p14, %r2, 0;
	@%p14 bra 	$L__BB13_16;

	cvta.to.global.u64 	%rd8, %rd2;
	mul.wide.u32 	%rd9, %r1, 4;
	add.s64 	%rd10, %rd8, %rd9;
	st.global.u32 	[%rd10], %r22;

$L__BB13_16:
	ret;

}
	// .globl	reduce_min_i64
.visible .entry reduce_min_i64(
	.param .u64 reduce_min_i64_param_0,
	.param .u32 reduce_min_i64_param_1,
	.param .u64 reduce_min_i64_param_2
)
{
	.reg .pred 	%p<20>;
	.reg .b32 	%r<42>;
	.reg .b64 	%rd<51>;


	ld.param.u64 	%rd18, [reduce_min_i64_param_0];
	ld.param.u32 	%r9, [reduce_min_i64_param_1];
	ld.param.u64 	%rd16, [reduce_min_i64_param_2];
	cvta.to.global.u64 	%rd1, %rd18;
	mov.u32 	%r1, %ctaid.x;
	shl.b32 	%r10, %r1, 11;
	mov.u32 	%r2, %tid.x;
	add.s32 	%r41, %r10, %r2;
	setp.ge.u32 	%p1, %r41, %r9;
	mov.u64 	%rd44, 9223372036854775807;
	@%p1 bra 	$L__BB14_5;

	mov.u32 	%r11, %nctaid.x;
	shl.b32 	%r4, %r11, 11;

$L__BB14_2:
	mul.wide.u32 	%rd20, %r41, 8;
	add.s64 	%rd21, %rd1, %rd20;
	ld.global.u64 	%rd22, [%rd21];
	min.s64 	%rd44, %rd44, %rd22;
	add.s32 	%r6, %r41, 1024;
	setp.ge.u32 	%p2, %r6, %r9;
	@%p2 bra 	$L__BB14_4;

	mul.wide.u32 	%rd23, %r6, 8;
	add.s64 	%rd24, %rd1, %rd23;
	ld.global.u64 	%rd25, [%rd24];
	min.s64 	%rd44, %rd44, %rd25;

$L__BB14_4:
	add.s32 	%r41, %r41, %r4;
	setp.lt.u32 	%p3, %r41, %r9;
	@%p3 bra 	$L__BB14_2;

$L__BB14_5:
	shl.b32 	%r12, %r2, 3;
	mov.u32 	%r13, shared;
	add.s32 	%r8, %r13, %r12;
	st.shared.u64 	[%r8], %rd44;
	bar.sync 	0;
	setp.gt.u32 	%p4, %r2, 511;
	@%p4 bra 	$L__BB14_7;

	ld.shared.u64 	%rd26, [%r8+4096];
	min.s64 	%rd44, %rd44, %rd26;
	st.shared.u64 	[%r8], %rd44;

$L__BB14_7:
	bar.sync 	0;
	setp.gt.u32 	%p5, %r2, 255;
	@%p5 bra 	$L__BB14_9;

	ld.shared.u64 	%rd27, [%r8+2048];
	min.s64 	%rd44, %rd44, %rd27;
	st.shared.u64 	[%r8], %rd44;

$L__BB14_9:
	bar.sync 	0;
	setp.gt.u32 	%p6, %r2, 127;
	@%p6 bra 	$L__BB14_11;

	ld.shared.u64 	%rd28, [%r8+1024];
	min.s64 	%rd44, %rd44, %rd28;
	st.shared.u64 	[%r8], %rd44;

$L__BB14_11:
	bar.sync 	0;
	setp.gt.u32 	%p7, %r2, 63;
	@%p7 bra 	$L__BB14_13;

	ld.shared.u64 	%rd29, [%r8+512];
	min.s64 	%rd44, %rd44, %rd29;
	st.shared.u64 	[%r8], %rd44;

$L__BB14_13:
	bar.sync 	0;
	setp.gt.u32 	%p8, %r2, 31;
	@%p8 bra 	$L__BB14_16;

	ld.shared.u64 	%rd40, [%r8+256];
	min.s64 	%rd30, %rd44, %rd40;
	// begin inline asm
	mov.b64 {%r14,%r15}, %rd30;
	// end inline asm
	mov.u32 	%r34, 2;
	mov.u32 	%r35, 31;
	mov.u32 	%r36, 16;
	mov.u32 	%r37, -1;
	shfl.sync.down.b32 	%r17|%p9, %r15, %r36, %r35, %r37;
	shfl.sync.down.b32 	%r16|%p10, %r14, %r36, %r35, %r37;
	// begin inline asm
	mov.b64 %rd31, {%r16,%r17};
	// end inline asm
	min.s64 	%rd32, %rd30, %rd31;
	// begin inline asm
	mov.b64 {%r18,%r19}, %rd32;
	// end inline asm
	mov.u32 	%r38, 8;
	shfl.sync.down.b32 	%r21|%p11, %r19, %r38, %r35, %r37;
	shfl.sync.down.b32 	%r20|%p12, %r18, %r38, %r35, %r37;
	// begin inline asm
	mov.b64 %rd33, {%r20,%r21};
	// end inline asm
	min.s64 	%rd34, %rd32, %rd33;
	// begin inline asm
	mov.b64 {%r22,%r23}, %rd34;
	// end inline asm
	mov.u32 	%r39, 4;
	shfl.sync.down.b32 	%r25|%p13, %r23, %r39, %r35, %r37;
	shfl.sync.down.b32 	%r24|%p14, %r22, %r39, %r35, %r37;
	// begin inline asm
	mov.b64 %rd35, {%r24,%r25};
	// end inline asm
	min.s64 	%rd36, %rd34, %rd35;
	// begin inline asm
	mov.b64 {%r26,%r27}, %rd36;
	// end inline asm
	shfl.sync.down.b32 	%r29|%p15, %r27, %r34, %r35, %r37;
	shfl.sync.down.b32 	%r28|%p16, %r26, %r34, %r35, %r37;
	// begin inline asm
	mov.b64 %rd37, {%r28,%r29};
	// end inline asm
	min.s64 	%rd38, %rd36, %rd37;
	// begin inline asm
	mov.b64 {%r30,%r31}, %rd38;
	// end inline asm
	mov.u32 	%r40, 1;
	shfl.sync.down.b32 	%r33|%p17, %r31, %r40, %r35, %r37;
	shfl.sync.down.b32 	%r32|%p18, %r30, %r40, %r35, %r37;
	// begin inline asm
	mov.b64 %rd39, {%r32,%r33};
	// end inline asm
	min.s64 	%rd15, %rd38, %rd39;
	setp.ne.s32 	%p19, %r2, 0;
	@%p19 bra 	$L__BB14_16;

	cvta.to.global.u64 	%rd41, %rd16;
	mul.wide.u32 	%rd42, %r1, 8;
	add.s64 	%rd43, %rd41, %rd42;
	st.global.u64 	[%rd43], %rd15;

$L__BB14_16:
	ret;

}
	// .globl	reduce_min_u64
.visible .entry reduce_min_u64(
	.param .u64 reduce_min_u64_param_0,
	.param .u32 reduce_min_u64_param_1,
	.param .u64 reduce_min_u64_param_2
)
{
	.reg .pred 	%p<20>;
	.reg .b32 	%r<42>;
	.reg .b64 	%rd<51>;


	ld.param.u64 	%rd18, [reduce_min_u64_param_0];
	ld.param.u32 	%r9, [reduce_min_u64_param_1];
	ld.param.u64 	%rd16, [reduce_min_u64_param_2];
	cvta.to.global.u64 	%rd1, %rd18;
	mov.u32 	%r1, %ctaid.x;
	shl.b32 	%r10, %r1, 11;
	mov.u32 	%r2, %tid.x;
	add.s32 	%r41, %r10, %r2;
	setp.ge.u32 	%p1, %r41, %r9;
	mov.u64 	%rd44, -1;
	@%p1 bra 	$L__BB15_5;

	mov.u32 	%r11, %nctaid.x;
	shl.b32 	%r4, %r11, 11;

$L__BB15_2:
	mul.wide.u32 	%rd20, %r41, 8;
	add.s64 	%rd21, %rd1, %rd20;
	ld.global.u64 	%rd22, [%rd21];
	min.u64 	%rd44, %rd44, %rd22;
	add.s32 	%r6, %r41, 1024;
	setp.ge.u32 	%p2, %r6, %r9;
	@%p2 bra 	$L__BB15_4;

	mul.wide.u32 	%rd23, %r6, 8;
	add.s64 	%rd24, %rd1, %rd23;
	ld.global.u64 	%rd25, [%rd24];
	min.u64 	%rd44, %rd44, %rd25;

$L__BB15_4:
	add.s32 	%r41, %r41, %r4;
	setp.lt.u32 	%p3, %r41, %r9;
	@%p3 bra 	$L__BB15_2;

$L__BB15_5:
	shl.b32 	%r12, %r2, 3;
	mov.u32 	%r13, shared;
	add.s32 	%r8, %r13, %r12;
	st.shared.u64 	[%r8], %rd44;
	bar.sync 	0;
	setp.gt.u32 	%p4, %r2, 511;
	@%p4 bra 	$L__BB15_7;

	ld.shared.u64 	%rd26, [%r8+4096];
	min.u64 	%rd44, %rd44, %rd26;
	st.shared.u64 	[%r8], %rd44;

$L__BB15_7:
	bar.sync 	0;
	setp.gt.u32 	%p5, %r2, 255;
	@%p5 bra 	$L__BB15_9;

	ld.shared.u64 	%rd27, [%r8+2048];
	min.u64 	%rd44, %rd44, %rd27;
	st.shared.u64 	[%r8], %rd44;

$L__BB15_9:
	bar.sync 	0;
	setp.gt.u32 	%p6, %r2, 127;
	@%p6 bra 	$L__BB15_11;

	ld.shared.u64 	%rd28, [%r8+1024];
	min.u64 	%rd44, %rd44, %rd28;
	st.shared.u64 	[%r8], %rd44;

$L__BB15_11:
	bar.sync 	0;
	setp.gt.u32 	%p7, %r2, 63;
	@%p7 bra 	$L__BB15_13;

	ld.shared.u64 	%rd29, [%r8+512];
	min.u64 	%rd44, %rd44, %rd29;
	st.shared.u64 	[%r8], %rd44;

$L__BB15_13:
	bar.sync 	0;
	setp.gt.u32 	%p8, %r2, 31;
	@%p8 bra 	$L__BB15_16;

	ld.shared.u64 	%rd40, [%r8+256];
	min.u64 	%rd30, %rd44, %rd40;
	// begin inline asm
	mov.b64 {%r14,%r15}, %rd30;
	// end inline asm
	mov.u32 	%r34, 2;
	mov.u32 	%r35, 31;
	mov.u32 	%r36, 16;
	mov.u32 	%r37, -1;
	shfl.sync.down.b32 	%r17|%p9, %r15, %r36, %r35, %r37;
	shfl.sync.down.b32 	%r16|%p10, %r14, %r36, %r35, %r37;
	// begin inline asm
	mov.b64 %rd31, {%r16,%r17};
	// end inline asm
	min.u64 	%rd32, %rd30, %rd31;
	// begin inline asm
	mov.b64 {%r18,%r19}, %rd32;
	// end inline asm
	mov.u32 	%r38, 8;
	shfl.sync.down.b32 	%r21|%p11, %r19, %r38, %r35, %r37;
	shfl.sync.down.b32 	%r20|%p12, %r18, %r38, %r35, %r37;
	// begin inline asm
	mov.b64 %rd33, {%r20,%r21};
	// end inline asm
	min.u64 	%rd34, %rd32, %rd33;
	// begin inline asm
	mov.b64 {%r22,%r23}, %rd34;
	// end inline asm
	mov.u32 	%r39, 4;
	shfl.sync.down.b32 	%r25|%p13, %r23, %r39, %r35, %r37;
	shfl.sync.down.b32 	%r24|%p14, %r22, %r39, %r35, %r37;
	// begin inline asm
	mov.b64 %rd35, {%r24,%r25};
	// end inline asm
	min.u64 	%rd36, %rd34, %rd35;
	// begin inline asm
	mov.b64 {%r26,%r27}, %rd36;
	// end inline asm
	shfl.sync.down.b32 	%r29|%p15, %r27, %r34, %r35, %r37;
	shfl.sync.down.b32 	%r28|%p16, %r26, %r34, %r35, %r37;
	// begin inline asm
	mov.b64 %rd37, {%r28,%r29};
	// end inline asm
	min.u64 	%rd38, %rd36, %rd37;
	// begin inline asm
	mov.b64 {%r30,%r31}, %rd38;
	// end inline asm
	mov.u32 	%r40, 1;
	shfl.sync.down.b32 	%r33|%p17, %r31, %r40, %r35, %r37;
	shfl.sync.down.b32 	%r32|%p18, %r30, %r40, %r35, %r37;
	// begin inline asm
	mov.b64 %rd39, {%r32,%r33};
	// end inline asm
	min.u64 	%rd15, %rd38, %rd39;
	setp.ne.s32 	%p19, %r2, 0;
	@%p19 bra 	$L__BB15_16;

	cvta.to.global.u64 	%rd41, %rd16;
	mul.wide.u32 	%rd42, %r1, 8;
	add.s64 	%rd43, %rd41, %rd42;
	st.global.u64 	[%rd43], %rd15;

$L__BB15_16:
	ret;

}
	// .globl	reduce_min_f32
.visible .entry reduce_min_f32(
	.param .u64 reduce_min_f32_param_0,
	.param .u32 reduce_min_f32_param_1,
	.param .u64 reduce_min_f32_param_2
)
{
	.reg .pred 	%p<15>;
	.reg .f32 	%f<41>;
	.reg .b32 	%r<33>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd3, [reduce_min_f32_param_0];
	ld.param.u32 	%r8, [reduce_min_f32_param_1];
	ld.param.u64 	%rd2, [reduce_min_f32_param_2];
	cvta.to.global.u64 	%rd1, %rd3;
	mov.u32 	%r9, %ctaid.x;
	shl.b32 	%r10, %r9, 11;
	mov.u32 	%r1, %tid.x;
	add.s32 	%r32, %r10, %r1;
	setp.ge.u32 	%p1, %r32, %r8;
	mov.f32 	%f34, 0f7F800000;
	@%p1 bra 	$L__BB16_5;

	mov.u32 	%r11, %nctaid.x;
	shl.b32 	%r3, %r11, 11;

$L__BB16_2:
	mul.wide.u32 	%rd4, %r32, 4;
	add.s64 	%rd5, %rd1, %rd4;
	ld.global.f32 	%f17, [%rd5];
	min.f32 	%f34, %f34, %f17;
	add.s32 	%r5, %r32, 1024;
	setp.ge.u32 	%p2, %r5, %r8;
	@%p2 bra 	$L__BB16_4;

	mul.wide.u32 	%rd6, %r5, 4;
	add.s64 	%rd7, %rd1, %rd6;
	ld.global.f32 	%f18, [%rd7];
	min.f32 	%f34, %f34, %f18;

$L__BB16_4:
	add.s32 	%r32, %r32, %r3;
	setp.lt.u32 	%p3, %r32, %r8;
	@%p3 bra 	$L__BB16_2;

$L__BB16_5:
	shl.b32 	%r12, %r1, 2;
	mov.u32 	%r13, shared;
	add.s32 	%r7, %r13, %r12;
	st.shared.f32 	[%r7], %f34;
	bar.sync 	0;
	setp.gt.u32 	%p4, %r1, 511;
	@%p4 bra 	$L__BB16_7;

	ld.shared.f32 	%f19, [%r7+2048];
	min.f32 	%f34, %f34, %f19;
	st.shared.f32 	[%r7], %f34;

$L__BB16_7:
	bar.sync 	0;
	setp.gt.u32 	%p5, %r1, 255;
	@%p5 bra 	$L__BB16_9;

	ld.shared.f32 	%f20, [%r7+1024];
	min.f32 	%f34, %f34, %f20;
	st.shared.f32 	[%r7], %f34;

$L__BB16_9:
	bar.sync 	0;
	setp.gt.u32 	%p6, %r1, 127;
	@%p6 bra 	$L__BB16_11;

	ld.shared.f32 	%f21, [%r7+512];
	min.f32 	%f34, %f34, %f21;
	st.shared.f32 	[%r7], %f34;

$L__BB16_11:
	bar.sync 	0;
	setp.gt.u32 	%p7, %r1, 63;
	@%p7 bra 	$L__BB16_13;

	ld.shared.f32 	%f22, [%r7+256];
	min.f32 	%f34, %f34, %f22;
	st.shared.f32 	[%r7], %f34;

$L__BB16_13:
	bar.sync 	0;
	setp.gt.u32 	%p8, %r1, 31;
	@%p8 bra 	$L__BB16_16;

	ld.shared.f32 	%f23, [%r7+128];
	min.f32 	%f24, %f34, %f23;
	mov.b32 	%r14, %f24;
	mov.u32 	%r15, 2;
	mov.u32 	%r16, 31;
	mov.u32 	%r17, 16;
	mov.u32 	%r18, -1;
	shfl.sync.down.b32 	%r19|%p9, %r14, %r17, %r16, %r18;
	mov.b32 	%f25, %r19;
	min.f32 	%f26, %f24, %f25;
	mov.b32 	%r20, %f26;
	mov.u32 	%r21, 8;
	shfl.sync.down.b32 	%r22|%p10, %r20, %r21, %r16, %r18;
	mov.b32 	%f27, %r22;
	min.f32 	%f28, %f26, %f27;
	mov.b32 	%r23, %f28;
	mov.u32 	%r24, 4;
	shfl.sync.down.b32 	%r25|%p11, %r23, %r24, %r16, %r18;
	mov.b32 	%f29, %r25;
	min.f32 	%f30, %f28, %f29;
	mov.b32 	%r26, %f30;
	shfl.sync.down.b32 	%r27|%p12, %r26, %r15, %r16, %r18;
	mov.b32 	%f31, %r27;
	min.f32 	%f32, %f30, %f31;
	mov.b32 	%r28, %f32;
	mov.u32 	%r29, 1;
	shfl.sync.down.b32 	%r30|%p13, %r28, %r29, %r16, %r18;
	mov.b32 	%f33, %r30;
	min.f32 	%f14, %f32, %f33;
	setp.ne.s32 	%p14, %r1, 0;
	@%p14 bra 	$L__BB16_16;

	cvta.to.global.u64 	%rd8, %rd2;
	mul.wide.u32 	%rd9, %r9, 4;
	add.s64 	%rd10, %rd8, %rd9;
	st.global.f32 	[%rd10], %f14;

$L__BB16_16:
	ret;

}
	// .globl	reduce_min_f64
.visible .entry reduce_min_f64(
	.param .u64 reduce_min_f64_param_0,
	.param .u32 reduce_min_f64_param_1,
	.param .u64 reduce_min_f64_param_2
)
{
	.reg .pred 	%p<20>;
	.reg .b32 	%r<42>;
	.reg .f64 	%fd<41>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd3, [reduce_min_f64_param_0];
	ld.param.u32 	%r9, [reduce_min_f64_param_1];
	ld.param.u64 	%rd2, [reduce_min_f64_param_2];
	cvta.to.global.u64 	%rd1, %rd3;
	mov.u32 	%r1, %ctaid.x;
	shl.b32 	%r10, %r1, 11;
	mov.u32 	%r2, %tid.x;
	add.s32 	%r41, %r10, %r2;
	setp.ge.u32 	%p1, %r41, %r9;
	mov.f64 	%fd34, 0d7FF0000000000000;
	@%p1 bra 	$L__BB17_5;

	mov.u32 	%r11, %nctaid.x;
	shl.b32 	%r4, %r11, 11;

$L__BB17_2:
	mul.wide.u32 	%rd4, %r41, 8;
	add.s64 	%rd5, %rd1, %rd4;
	ld.global.f64 	%fd17, [%rd5];
	min.f64 	%fd34, %fd34, %fd17;
	add.s32 	%r6, %r41, 1024;
	setp.ge.u32 	%p2, %r6, %r9;
	@%p2 bra 	$L__BB17_4;

	mul.wide.u32 	%rd6, %r6, 8;
	add.s64 	%rd7, %rd1, %rd6;
	ld.global.f64 	%fd18, [%rd7];
	min.f64 	%fd34, %fd34, %fd18;

$L__BB17_4:
	add.s32 	%r41, %r41, %r4;
	setp.lt.u32 	%p3, %r41, %r9;
	@%p3 bra 	$L__BB17_2;

$L__BB17_5:
	shl.b32 	%r12, %r2, 3;
	mov.u32 	%r13, shared_d;
	add.s32 	%r8, %r13, %r12;
	st.shared.f64 	[%r8], %fd34;
	bar.sync 	0;
	setp.gt.u32 	%p4, %r2, 511;
	@%p4 bra 	$L__BB17_7;

	ld.shared.f64 	%fd19, [%r8+4096];
	min.f64 	%fd34, %fd34, %fd19;
	st.shared.f64 	[%r8], %fd34;

$L__BB17_7:
	bar.sync 	0;
	setp.gt.u32 	%p5, %r2, 255;
	@%p5 bra 	$L__BB17_9;

	ld.shared.f64 	%fd20, [%r8+2048];
	min.f64 	%fd34, %fd34, %fd20;
	st.shared.f64 	[%r8], %fd34;

$L__BB17_9:
	bar.sync 	0;
	setp.gt.u32 	%p6, %r2, 127;
	@%p6 bra 	$L__BB17_11;

	ld.shared.f64 	%fd21, [%r8+1024];
	min.f64 	%fd34, %fd34, %fd21;
	st.shared.f64 	[%r8], %fd34;

$L__BB17_11:
	bar.sync 	0;
	setp.gt.u32 	%p7, %r2, 63;
	@%p7 bra 	$L__BB17_13;

	ld.shared.f64 	%fd22, [%r8+512];
	min.f64 	%fd34, %fd34, %fd22;
	st.shared.f64 	[%r8], %fd34;

$L__BB17_13:
	bar.sync 	0;
	setp.gt.u32 	%p8, %r2, 31;
	@%p8 bra 	$L__BB17_16;

	ld.shared.f64 	%fd33, [%r8+256];
	min.f64 	%fd23, %fd34, %fd33;
	// begin inline asm
	mov.b64 {%r14,%r15}, %fd23;
	// end inline asm
	mov.u32 	%r34, 2;
	mov.u32 	%r35, 31;
	mov.u32 	%r36, 16;
	mov.u32 	%r37, -1;
	shfl.sync.down.b32 	%r17|%p9, %r15, %r36, %r35, %r37;
	shfl.sync.down.b32 	%r16|%p10, %r14, %r36, %r35, %r37;
	// begin inline asm
	mov.b64 %fd24, {%r16,%r17};
	// end inline asm
	min.f64 	%fd25, %fd23, %fd24;
	// begin inline asm
	mov.b64 {%r18,%r19}, %fd25;
	// end inline asm
	mov.u32 	%r38, 8;
	shfl.sync.down.b32 	%r21|%p11, %r19, %r38, %r35, %r37;
	shfl.sync.down.b32 	%r20|%p12, %r18, %r38, %r35, %r37;
	// begin inline asm
	mov.b64 %fd26, {%r20,%r21};
	// end inline asm
	min.f64 	%fd27, %fd25, %fd26;
	// begin inline asm
	mov.b64 {%r22,%r23}, %fd27;
	// end inline asm
	mov.u32 	%r39, 4;
	shfl.sync.down.b32 	%r25|%p13, %r23, %r39, %r35, %r37;
	shfl.sync.down.b32 	%r24|%p14, %r22, %r39, %r35, %r37;
	// begin inline asm
	mov.b64 %fd28, {%r24,%r25};
	// end inline asm
	min.f64 	%fd29, %fd27, %fd28;
	// begin inline asm
	mov.b64 {%r26,%r27}, %fd29;
	// end inline asm
	shfl.sync.down.b32 	%r29|%p15, %r27, %r34, %r35, %r37;
	shfl.sync.down.b32 	%r28|%p16, %r26, %r34, %r35, %r37;
	// begin inline asm
	mov.b64 %fd30, {%r28,%r29};
	// end inline asm
	min.f64 	%fd31, %fd29, %fd30;
	// begin inline asm
	mov.b64 {%r30,%r31}, %fd31;
	// end inline asm
	mov.u32 	%r40, 1;
	shfl.sync.down.b32 	%r33|%p17, %r31, %r40, %r35, %r37;
	shfl.sync.down.b32 	%r32|%p18, %r30, %r40, %r35, %r37;
	// begin inline asm
	mov.b64 %fd32, {%r32,%r33};
	// end inline asm
	min.f64 	%fd14, %fd31, %fd32;
	setp.ne.s32 	%p19, %r2, 0;
	@%p19 bra 	$L__BB17_16;

	cvta.to.global.u64 	%rd8, %rd2;
	mul.wide.u32 	%rd9, %r1, 8;
	add.s64 	%rd10, %rd8, %rd9;
	st.global.f64 	[%rd10], %fd14;

$L__BB17_16:
	ret;

}
	// .globl	reduce_max_i32
.visible .entry reduce_max_i32(
	.param .u64 reduce_max_i32_param_0,
	.param .u32 reduce_max_i32_param_1,
	.param .u64 reduce_max_i32_param_2
)
{
	.reg .pred 	%p<15>;
	.reg .b32 	%r<62>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd3, [reduce_max_i32_param_0];
	ld.param.u32 	%r23, [reduce_max_i32_param_1];
	ld.param.u64 	%rd2, [reduce_max_i32_param_2];
	cvta.to.global.u64 	%rd1, %rd3;
	mov.u32 	%r1, %ctaid.x;
	shl.b32 	%r25, %r1, 11;
	mov.u32 	%r2, %tid.x;
	add.s32 	%r54, %r25, %r2;
	setp.ge.u32 	%p1, %r54, %r23;
	mov.u32 	%r55, -2147483648;
	@%p1 bra 	$L__BB18_5;

	mov.u32 	%r27, %nctaid.x;
	shl.b32 	%r4, %r27, 11;

$L__BB18_2:
	mul.wide.u32 	%rd4, %r54, 4;
	add.s64 	%rd5, %rd1, %rd4;
	ld.global.u32 	%r28, [%rd5];
	max.s32 	%r55, %r55, %r28;
	add.s32 	%r8, %r54, 1024;
	setp.ge.u32 	%p2, %r8, %r23;
	@%p2 bra 	$L__BB18_4;

	mul.wide.u32 	%rd6, %r8, 4;
	add.s64 	%rd7, %rd1, %rd6;
	ld.global.u32 	%r29, [%rd7];
	max.s32 	%r55, %r55, %r29;

$L__BB18_4:
	add.s32 	%r54, %r54, %r4;
	setp.lt.u32 	%p3, %r54, %r23;
	@%p3 bra 	$L__BB18_2;

$L__BB18_5:
	shl.b32 	%r30, %r2, 2;
	mov.u32 	%r31, shared;
	add.s32 	%r13, %r31, %r30;
	st.shared.u32 	[%r13], %r55;
	bar.sync 	0;
	setp.gt.u32 	%p4, %r2, 511;
	@%p4 bra 	$L__BB18_7;

	ld.shared.u32 	%r32, [%r13+2048];
	max.s32 	%r55, %r55, %r32;
	st.shared.u32 	[%r13], %r55;

$L__BB18_7:
	bar.sync 	0;
	setp.gt.u32 	%p5, %r2, 255;
	@%p5 bra 	$L__BB18_9;

	ld.shared.u32 	%r33, [%r13+1024];
	max.s32 	%r55, %r55, %r33;
	st.shared.u32 	[%r13], %r55;

$L__BB18_9:
	bar.sync 	0;
	setp.gt.u32 	%p6, %r2, 127;
	@%p6 bra 	$L__BB18_11;

	ld.shared.u32 	%r34, [%r13+512];
	max.s32 	%r55, %r55, %r34;
	st.shared.u32 	[%r13], %r55;

$L__BB18_11:
	bar.sync 	0;
	setp.gt.u32 	%p7, %r2, 63;
	@%p7 bra 	$L__BB18_13;

	ld.shared.u32 	%r35, [%r13+256];
	max.s32 	%r55, %r55, %r35;
	st.shared.u32 	[%r13], %r55;

$L__BB18_13:
	bar.sync 	0;
	setp.gt.u32 	%p8, %r2, 31;
	@%p8 bra 	$L__BB18_16;

	ld.shared.u32 	%r36, [%r13+128];
	max.s32 	%r37, %r55, %r36;
	mov.u32 	%r38, 2;
	mov.u32 	%r39, 31;
	mov.u32 	%r40, 16;
	mov.u32 	%r41, -1;
	shfl.sync.down.b32 	%r42|%p9, %r37, %r40, %r39, %r41;
	max.s32 	%r43, %r37, %r42;
	mov.u32 	%r44, 8;
	shfl.sync.down.b32 	%r45|%p10, %r43, %r44, %r39, %r41;
	max.s32 	%r46, %r43, %r45;
	mov.u32 	%r47, 4;
	shfl.sync.down.b32 	%r48|%p11, %r46, %r47, %r39, %r41;
	max.s32 	%r49, %r46, %r48;
	shfl.sync.down.b32 	%r50|%p12, %r49, %r38, %r39, %r41;
	max.s32 	%r51, %r49, %r50;
	mov.u32 	%r52, 1;
	shfl.sync.down.b32 	%r53|%p13, %r51, %r52, %r39, %r41;
	max.s32 	%r22, %r51, %r53;
	setp.ne.s32 	%p14, %r2, 0;
	@%p14 bra 	$L__BB18_16;

	cvta.to.global.u64 	%rd8, %rd2;
	mul.wide.u32 	%rd9, %r1, 4;
	add.s64 	%rd10, %rd8, %rd9;
	st.global.u32 	[%rd10], %r22;

$L__BB18_16:
	ret;

}
	// .globl	reduce_max_u32
.visible .entry reduce_max_u32(
	.param .u64 reduce_max_u32_param_0,
	.param .u32 reduce_max_u32_param_1,
	.param .u64 reduce_max_u32_param_2
)
{
	.reg .pred 	%p<15>;
	.reg .b32 	%r<62>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd3, [reduce_max_u32_param_0];
	ld.param.u32 	%r23, [reduce_max_u32_param_1];
	ld.param.u64 	%rd2, [reduce_max_u32_param_2];
	cvta.to.global.u64 	%rd1, %rd3;
	mov.u32 	%r1, %ctaid.x;
	shl.b32 	%r25, %r1, 11;
	mov.u32 	%r2, %tid.x;
	add.s32 	%r54, %r25, %r2;
	setp.ge.u32 	%p1, %r54, %r23;
	mov.u32 	%r55, 0;
	@%p1 bra 	$L__BB19_5;

	mov.u32 	%r27, %nctaid.x;
	shl.b32 	%r4, %r27, 11;

$L__BB19_2:
	mul.wide.u32 	%rd4, %r54, 4;
	add.s64 	%rd5, %rd1, %rd4;
	ld.global.u32 	%r28, [%rd5];
	max.u32 	%r55, %r55, %r28;
	add.s32 	%r8, %r54, 1024;
	setp.ge.u32 	%p2, %r8, %r23;
	@%p2 bra 	$L__BB19_4;

	mul.wide.u32 	%rd6, %r8, 4;
	add.s64 	%rd7, %rd1, %rd6;
	ld.global.u32 	%r29, [%rd7];
	max.u32 	%r55, %r55, %r29;

$L__BB19_4:
	add.s32 	%r54, %r54, %r4;
	setp.lt.u32 	%p3, %r54, %r23;
	@%p3 bra 	$L__BB19_2;

$L__BB19_5:
	shl.b32 	%r30, %r2, 2;
	mov.u32 	%r31, shared;
	add.s32 	%r13, %r31, %r30;
	st.shared.u32 	[%r13], %r55;
	bar.sync 	0;
	setp.gt.u32 	%p4, %r2, 511;
	@%p4 bra 	$L__BB19_7;

	ld.shared.u32 	%r32, [%r13+2048];
	max.u32 	%r55, %r55, %r32;
	st.shared.u32 	[%r13], %r55;

$L__BB19_7:
	bar.sync 	0;
	setp.gt.u32 	%p5, %r2, 255;
	@%p5 bra 	$L__BB19_9;

	ld.shared.u32 	%r33, [%r13+1024];
	max.u32 	%r55, %r55, %r33;
	st.shared.u32 	[%r13], %r55;

$L__BB19_9:
	bar.sync 	0;
	setp.gt.u32 	%p6, %r2, 127;
	@%p6 bra 	$L__BB19_11;

	ld.shared.u32 	%r34, [%r13+512];
	max.u32 	%r55, %r55, %r34;
	st.shared.u32 	[%r13], %r55;

$L__BB19_11:
	bar.sync 	0;
	setp.gt.u32 	%p7, %r2, 63;
	@%p7 bra 	$L__BB19_13;

	ld.shared.u32 	%r35, [%r13+256];
	max.u32 	%r55, %r55, %r35;
	st.shared.u32 	[%r13], %r55;

$L__BB19_13:
	bar.sync 	0;
	setp.gt.u32 	%p8, %r2, 31;
	@%p8 bra 	$L__BB19_16;

	ld.shared.u32 	%r36, [%r13+128];
	max.u32 	%r37, %r55, %r36;
	mov.u32 	%r38, 2;
	mov.u32 	%r39, 31;
	mov.u32 	%r40, 16;
	mov.u32 	%r41, -1;
	shfl.sync.down.b32 	%r42|%p9, %r37, %r40, %r39, %r41;
	max.u32 	%r43, %r37, %r42;
	mov.u32 	%r44, 8;
	shfl.sync.down.b32 	%r45|%p10, %r43, %r44, %r39, %r41;
	max.u32 	%r46, %r43, %r45;
	mov.u32 	%r47, 4;
	shfl.sync.down.b32 	%r48|%p11, %r46, %r47, %r39, %r41;
	max.u32 	%r49, %r46, %r48;
	shfl.sync.down.b32 	%r50|%p12, %r49, %r38, %r39, %r41;
	max.u32 	%r51, %r49, %r50;
	mov.u32 	%r52, 1;
	shfl.sync.down.b32 	%r53|%p13, %r51, %r52, %r39, %r41;
	max.u32 	%r22, %r51, %r53;
	setp.ne.s32 	%p14, %r2, 0;
	@%p14 bra 	$L__BB19_16;

	cvta.to.global.u64 	%rd8, %rd2;
	mul.wide.u32 	%rd9, %r1, 4;
	add.s64 	%rd10, %rd8, %rd9;
	st.global.u32 	[%rd10], %r22;

$L__BB19_16:
	ret;

}
	// .globl	reduce_max_i64
.visible .entry reduce_max_i64(
	.param .u64 reduce_max_i64_param_0,
	.param .u32 reduce_max_i64_param_1,
	.param .u64 reduce_max_i64_param_2
)
{
	.reg .pred 	%p<20>;
	.reg .b32 	%r<42>;
	.reg .b64 	%rd<51>;


	ld.param.u64 	%rd18, [reduce_max_i64_param_0];
	ld.param.u32 	%r9, [reduce_max_i64_param_1];
	ld.param.u64 	%rd16, [reduce_max_i64_param_2];
	cvta.to.global.u64 	%rd1, %rd18;
	mov.u32 	%r1, %ctaid.x;
	shl.b32 	%r10, %r1, 11;
	mov.u32 	%r2, %tid.x;
	add.s32 	%r41, %r10, %r2;
	setp.ge.u32 	%p1, %r41, %r9;
	mov.u64 	%rd44, -9223372036854775808;
	@%p1 bra 	$L__BB20_5;

	mov.u32 	%r11, %nctaid.x;
	shl.b32 	%r4, %r11, 11;

$L__BB20_2:
	mul.wide.u32 	%rd20, %r41, 8;
	add.s64 	%rd21, %rd1, %rd20;
	ld.global.u64 	%rd22, [%rd21];
	max.s64 	%rd44, %rd44, %rd22;
	add.s32 	%r6, %r41, 1024;
	setp.ge.u32 	%p2, %r6, %r9;
	@%p2 bra 	$L__BB20_4;

	mul.wide.u32 	%rd23, %r6, 8;
	add.s64 	%rd24, %rd1, %rd23;
	ld.global.u64 	%rd25, [%rd24];
	max.s64 	%rd44, %rd44, %rd25;

$L__BB20_4:
	add.s32 	%r41, %r41, %r4;
	setp.lt.u32 	%p3, %r41, %r9;
	@%p3 bra 	$L__BB20_2;

$L__BB20_5:
	shl.b32 	%r12, %r2, 3;
	mov.u32 	%r13, shared;
	add.s32 	%r8, %r13, %r12;
	st.shared.u64 	[%r8], %rd44;
	bar.sync 	0;
	setp.gt.u32 	%p4, %r2, 511;
	@%p4 bra 	$L__BB20_7;

	ld.shared.u64 	%rd26, [%r8+4096];
	max.s64 	%rd44, %rd44, %rd26;
	st.shared.u64 	[%r8], %rd44;

$L__BB20_7:
	bar.sync 	0;
	setp.gt.u32 	%p5, %r2, 255;
	@%p5 bra 	$L__BB20_9;

	ld.shared.u64 	%rd27, [%r8+2048];
	max.s64 	%rd44, %rd44, %rd27;
	st.shared.u64 	[%r8], %rd44;

$L__BB20_9:
	bar.sync 	0;
	setp.gt.u32 	%p6, %r2, 127;
	@%p6 bra 	$L__BB20_11;

	ld.shared.u64 	%rd28, [%r8+1024];
	max.s64 	%rd44, %rd44, %rd28;
	st.shared.u64 	[%r8], %rd44;

$L__BB20_11:
	bar.sync 	0;
	setp.gt.u32 	%p7, %r2, 63;
	@%p7 bra 	$L__BB20_13;

	ld.shared.u64 	%rd29, [%r8+512];
	max.s64 	%rd44, %rd44, %rd29;
	st.shared.u64 	[%r8], %rd44;

$L__BB20_13:
	bar.sync 	0;
	setp.gt.u32 	%p8, %r2, 31;
	@%p8 bra 	$L__BB20_16;

	ld.shared.u64 	%rd40, [%r8+256];
	max.s64 	%rd30, %rd44, %rd40;
	// begin inline asm
	mov.b64 {%r14,%r15}, %rd30;
	// end inline asm
	mov.u32 	%r34, 2;
	mov.u32 	%r35, 31;
	mov.u32 	%r36, 16;
	mov.u32 	%r37, -1;
	shfl.sync.down.b32 	%r17|%p9, %r15, %r36, %r35, %r37;
	shfl.sync.down.b32 	%r16|%p10, %r14, %r36, %r35, %r37;
	// begin inline asm
	mov.b64 %rd31, {%r16,%r17};
	// end inline asm
	max.s64 	%rd32, %rd30, %rd31;
	// begin inline asm
	mov.b64 {%r18,%r19}, %rd32;
	// end inline asm
	mov.u32 	%r38, 8;
	shfl.sync.down.b32 	%r21|%p11, %r19, %r38, %r35, %r37;
	shfl.sync.down.b32 	%r20|%p12, %r18, %r38, %r35, %r37;
	// begin inline asm
	mov.b64 %rd33, {%r20,%r21};
	// end inline asm
	max.s64 	%rd34, %rd32, %rd33;
	// begin inline asm
	mov.b64 {%r22,%r23}, %rd34;
	// end inline asm
	mov.u32 	%r39, 4;
	shfl.sync.down.b32 	%r25|%p13, %r23, %r39, %r35, %r37;
	shfl.sync.down.b32 	%r24|%p14, %r22, %r39, %r35, %r37;
	// begin inline asm
	mov.b64 %rd35, {%r24,%r25};
	// end inline asm
	max.s64 	%rd36, %rd34, %rd35;
	// begin inline asm
	mov.b64 {%r26,%r27}, %rd36;
	// end inline asm
	shfl.sync.down.b32 	%r29|%p15, %r27, %r34, %r35, %r37;
	shfl.sync.down.b32 	%r28|%p16, %r26, %r34, %r35, %r37;
	// begin inline asm
	mov.b64 %rd37, {%r28,%r29};
	// end inline asm
	max.s64 	%rd38, %rd36, %rd37;
	// begin inline asm
	mov.b64 {%r30,%r31}, %rd38;
	// end inline asm
	mov.u32 	%r40, 1;
	shfl.sync.down.b32 	%r33|%p17, %r31, %r40, %r35, %r37;
	shfl.sync.down.b32 	%r32|%p18, %r30, %r40, %r35, %r37;
	// begin inline asm
	mov.b64 %rd39, {%r32,%r33};
	// end inline asm
	max.s64 	%rd15, %rd38, %rd39;
	setp.ne.s32 	%p19, %r2, 0;
	@%p19 bra 	$L__BB20_16;

	cvta.to.global.u64 	%rd41, %rd16;
	mul.wide.u32 	%rd42, %r1, 8;
	add.s64 	%rd43, %rd41, %rd42;
	st.global.u64 	[%rd43], %rd15;

$L__BB20_16:
	ret;

}
	// .globl	reduce_max_u64
.visible .entry reduce_max_u64(
	.param .u64 reduce_max_u64_param_0,
	.param .u32 reduce_max_u64_param_1,
	.param .u64 reduce_max_u64_param_2
)
{
	.reg .pred 	%p<20>;
	.reg .b32 	%r<42>;
	.reg .b64 	%rd<51>;


	ld.param.u64 	%rd18, [reduce_max_u64_param_0];
	ld.param.u32 	%r9, [reduce_max_u64_param_1];
	ld.param.u64 	%rd16, [reduce_max_u64_param_2];
	cvta.to.global.u64 	%rd1, %rd18;
	mov.u32 	%r1, %ctaid.x;
	shl.b32 	%r10, %r1, 11;
	mov.u32 	%r2, %tid.x;
	add.s32 	%r41, %r10, %r2;
	setp.ge.u32 	%p1, %r41, %r9;
	mov.u64 	%rd44, 0;
	@%p1 bra 	$L__BB21_5;

	mov.u32 	%r11, %nctaid.x;
	shl.b32 	%r4, %r11, 11;

$L__BB21_2:
	mul.wide.u32 	%rd20, %r41, 8;
	add.s64 	%rd21, %rd1, %rd20;
	ld.global.u64 	%rd22, [%rd21];
	max.u64 	%rd44, %rd44, %rd22;
	add.s32 	%r6, %r41, 1024;
	setp.ge.u32 	%p2, %r6, %r9;
	@%p2 bra 	$L__BB21_4;

	mul.wide.u32 	%rd23, %r6, 8;
	add.s64 	%rd24, %rd1, %rd23;
	ld.global.u64 	%rd25, [%rd24];
	max.u64 	%rd44, %rd44, %rd25;

$L__BB21_4:
	add.s32 	%r41, %r41, %r4;
	setp.lt.u32 	%p3, %r41, %r9;
	@%p3 bra 	$L__BB21_2;

$L__BB21_5:
	shl.b32 	%r12, %r2, 3;
	mov.u32 	%r13, shared;
	add.s32 	%r8, %r13, %r12;
	st.shared.u64 	[%r8], %rd44;
	bar.sync 	0;
	setp.gt.u32 	%p4, %r2, 511;
	@%p4 bra 	$L__BB21_7;

	ld.shared.u64 	%rd26, [%r8+4096];
	max.u64 	%rd44, %rd44, %rd26;
	st.shared.u64 	[%r8], %rd44;

$L__BB21_7:
	bar.sync 	0;
	setp.gt.u32 	%p5, %r2, 255;
	@%p5 bra 	$L__BB21_9;

	ld.shared.u64 	%rd27, [%r8+2048];
	max.u64 	%rd44, %rd44, %rd27;
	st.shared.u64 	[%r8], %rd44;

$L__BB21_9:
	bar.sync 	0;
	setp.gt.u32 	%p6, %r2, 127;
	@%p6 bra 	$L__BB21_11;

	ld.shared.u64 	%rd28, [%r8+1024];
	max.u64 	%rd44, %rd44, %rd28;
	st.shared.u64 	[%r8], %rd44;

$L__BB21_11:
	bar.sync 	0;
	setp.gt.u32 	%p7, %r2, 63;
	@%p7 bra 	$L__BB21_13;

	ld.shared.u64 	%rd29, [%r8+512];
	max.u64 	%rd44, %rd44, %rd29;
	st.shared.u64 	[%r8], %rd44;

$L__BB21_13:
	bar.sync 	0;
	setp.gt.u32 	%p8, %r2, 31;
	@%p8 bra 	$L__BB21_16;

	ld.shared.u64 	%rd40, [%r8+256];
	max.u64 	%rd30, %rd44, %rd40;
	// begin inline asm
	mov.b64 {%r14,%r15}, %rd30;
	// end inline asm
	mov.u32 	%r34, 2;
	mov.u32 	%r35, 31;
	mov.u32 	%r36, 16;
	mov.u32 	%r37, -1;
	shfl.sync.down.b32 	%r17|%p9, %r15, %r36, %r35, %r37;
	shfl.sync.down.b32 	%r16|%p10, %r14, %r36, %r35, %r37;
	// begin inline asm
	mov.b64 %rd31, {%r16,%r17};
	// end inline asm
	max.u64 	%rd32, %rd30, %rd31;
	// begin inline asm
	mov.b64 {%r18,%r19}, %rd32;
	// end inline asm
	mov.u32 	%r38, 8;
	shfl.sync.down.b32 	%r21|%p11, %r19, %r38, %r35, %r37;
	shfl.sync.down.b32 	%r20|%p12, %r18, %r38, %r35, %r37;
	// begin inline asm
	mov.b64 %rd33, {%r20,%r21};
	// end inline asm
	max.u64 	%rd34, %rd32, %rd33;
	// begin inline asm
	mov.b64 {%r22,%r23}, %rd34;
	// end inline asm
	mov.u32 	%r39, 4;
	shfl.sync.down.b32 	%r25|%p13, %r23, %r39, %r35, %r37;
	shfl.sync.down.b32 	%r24|%p14, %r22, %r39, %r35, %r37;
	// begin inline asm
	mov.b64 %rd35, {%r24,%r25};
	// end inline asm
	max.u64 	%rd36, %rd34, %rd35;
	// begin inline asm
	mov.b64 {%r26,%r27}, %rd36;
	// end inline asm
	shfl.sync.down.b32 	%r29|%p15, %r27, %r34, %r35, %r37;
	shfl.sync.down.b32 	%r28|%p16, %r26, %r34, %r35, %r37;
	// begin inline asm
	mov.b64 %rd37, {%r28,%r29};
	// end inline asm
	max.u64 	%rd38, %rd36, %rd37;
	// begin inline asm
	mov.b64 {%r30,%r31}, %rd38;
	// end inline asm
	mov.u32 	%r40, 1;
	shfl.sync.down.b32 	%r33|%p17, %r31, %r40, %r35, %r37;
	shfl.sync.down.b32 	%r32|%p18, %r30, %r40, %r35, %r37;
	// begin inline asm
	mov.b64 %rd39, {%r32,%r33};
	// end inline asm
	max.u64 	%rd15, %rd38, %rd39;
	setp.ne.s32 	%p19, %r2, 0;
	@%p19 bra 	$L__BB21_16;

	cvta.to.global.u64 	%rd41, %rd16;
	mul.wide.u32 	%rd42, %r1, 8;
	add.s64 	%rd43, %rd41, %rd42;
	st.global.u64 	[%rd43], %rd15;

$L__BB21_16:
	ret;

}
	// .globl	reduce_max_f32
.visible .entry reduce_max_f32(
	.param .u64 reduce_max_f32_param_0,
	.param .u32 reduce_max_f32_param_1,
	.param .u64 reduce_max_f32_param_2
)
{
	.reg .pred 	%p<15>;
	.reg .f32 	%f<41>;
	.reg .b32 	%r<33>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd3, [reduce_max_f32_param_0];
	ld.param.u32 	%r8, [reduce_max_f32_param_1];
	ld.param.u64 	%rd2, [reduce_max_f32_param_2];
	cvta.to.global.u64 	%rd1, %rd3;
	mov.u32 	%r9, %ctaid.x;
	shl.b32 	%r10, %r9, 11;
	mov.u32 	%r1, %tid.x;
	add.s32 	%r32, %r10, %r1;
	setp.ge.u32 	%p1, %r32, %r8;
	mov.f32 	%f34, 0fFF800000;
	@%p1 bra 	$L__BB22_5;

	mov.u32 	%r11, %nctaid.x;
	shl.b32 	%r3, %r11, 11;

$L__BB22_2:
	mul.wide.u32 	%rd4, %r32, 4;
	add.s64 	%rd5, %rd1, %rd4;
	ld.global.f32 	%f17, [%rd5];
	max.f32 	%f34, %f34, %f17;
	add.s32 	%r5, %r32, 1024;
	setp.ge.u32 	%p2, %r5, %r8;
	@%p2 bra 	$L__BB22_4;

	mul.wide.u32 	%rd6, %r5, 4;
	add.s64 	%rd7, %rd1, %rd6;
	ld.global.f32 	%f18, [%rd7];
	max.f32 	%f34, %f34, %f18;

$L__BB22_4:
	add.s32 	%r32, %r32, %r3;
	setp.lt.u32 	%p3, %r32, %r8;
	@%p3 bra 	$L__BB22_2;

$L__BB22_5:
	shl.b32 	%r12, %r1, 2;
	mov.u32 	%r13, shared;
	add.s32 	%r7, %r13, %r12;
	st.shared.f32 	[%r7], %f34;
	bar.sync 	0;
	setp.gt.u32 	%p4, %r1, 511;
	@%p4 bra 	$L__BB22_7;

	ld.shared.f32 	%f19, [%r7+2048];
	max.f32 	%f34, %f34, %f19;
	st.shared.f32 	[%r7], %f34;

$L__BB22_7:
	bar.sync 	0;
	setp.gt.u32 	%p5, %r1, 255;
	@%p5 bra 	$L__BB22_9;

	ld.shared.f32 	%f20, [%r7+1024];
	max.f32 	%f34, %f34, %f20;
	st.shared.f32 	[%r7], %f34;

$L__BB22_9:
	bar.sync 	0;
	setp.gt.u32 	%p6, %r1, 127;
	@%p6 bra 	$L__BB22_11;

	ld.shared.f32 	%f21, [%r7+512];
	max.f32 	%f34, %f34, %f21;
	st.shared.f32 	[%r7], %f34;

$L__BB22_11:
	bar.sync 	0;
	setp.gt.u32 	%p7, %r1, 63;
	@%p7 bra 	$L__BB22_13;

	ld.shared.f32 	%f22, [%r7+256];
	max.f32 	%f34, %f34, %f22;
	st.shared.f32 	[%r7], %f34;

$L__BB22_13:
	bar.sync 	0;
	setp.gt.u32 	%p8, %r1, 31;
	@%p8 bra 	$L__BB22_16;

	ld.shared.f32 	%f23, [%r7+128];
	max.f32 	%f24, %f34, %f23;
	mov.b32 	%r14, %f24;
	mov.u32 	%r15, 2;
	mov.u32 	%r16, 31;
	mov.u32 	%r17, 16;
	mov.u32 	%r18, -1;
	shfl.sync.down.b32 	%r19|%p9, %r14, %r17, %r16, %r18;
	mov.b32 	%f25, %r19;
	max.f32 	%f26, %f24, %f25;
	mov.b32 	%r20, %f26;
	mov.u32 	%r21, 8;
	shfl.sync.down.b32 	%r22|%p10, %r20, %r21, %r16, %r18;
	mov.b32 	%f27, %r22;
	max.f32 	%f28, %f26, %f27;
	mov.b32 	%r23, %f28;
	mov.u32 	%r24, 4;
	shfl.sync.down.b32 	%r25|%p11, %r23, %r24, %r16, %r18;
	mov.b32 	%f29, %r25;
	max.f32 	%f30, %f28, %f29;
	mov.b32 	%r26, %f30;
	shfl.sync.down.b32 	%r27|%p12, %r26, %r15, %r16, %r18;
	mov.b32 	%f31, %r27;
	max.f32 	%f32, %f30, %f31;
	mov.b32 	%r28, %f32;
	mov.u32 	%r29, 1;
	shfl.sync.down.b32 	%r30|%p13, %r28, %r29, %r16, %r18;
	mov.b32 	%f33, %r30;
	max.f32 	%f14, %f32, %f33;
	setp.ne.s32 	%p14, %r1, 0;
	@%p14 bra 	$L__BB22_16;

	cvta.to.global.u64 	%rd8, %rd2;
	mul.wide.u32 	%rd9, %r9, 4;
	add.s64 	%rd10, %rd8, %rd9;
	st.global.f32 	[%rd10], %f14;

$L__BB22_16:
	ret;

}
	// .globl	reduce_max_f64
.visible .entry reduce_max_f64(
	.param .u64 reduce_max_f64_param_0,
	.param .u32 reduce_max_f64_param_1,
	.param .u64 reduce_max_f64_param_2
)
{
	.reg .pred 	%p<20>;
	.reg .b32 	%r<42>;
	.reg .f64 	%fd<41>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd3, [reduce_max_f64_param_0];
	ld.param.u32 	%r9, [reduce_max_f64_param_1];
	ld.param.u64 	%rd2, [reduce_max_f64_param_2];
	cvta.to.global.u64 	%rd1, %rd3;
	mov.u32 	%r1, %ctaid.x;
	shl.b32 	%r10, %r1, 11;
	mov.u32 	%r2, %tid.x;
	add.s32 	%r41, %r10, %r2;
	setp.ge.u32 	%p1, %r41, %r9;
	mov.f64 	%fd34, 0dFFF0000000000000;
	@%p1 bra 	$L__BB23_5;

	mov.u32 	%r11, %nctaid.x;
	shl.b32 	%r4, %r11, 11;

$L__BB23_2:
	mul.wide.u32 	%rd4, %r41, 8;
	add.s64 	%rd5, %rd1, %rd4;
	ld.global.f64 	%fd17, [%rd5];
	max.f64 	%fd34, %fd34, %fd17;
	add.s32 	%r6, %r41, 1024;
	setp.ge.u32 	%p2, %r6, %r9;
	@%p2 bra 	$L__BB23_4;

	mul.wide.u32 	%rd6, %r6, 8;
	add.s64 	%rd7, %rd1, %rd6;
	ld.global.f64 	%fd18, [%rd7];
	max.f64 	%fd34, %fd34, %fd18;

$L__BB23_4:
	add.s32 	%r41, %r41, %r4;
	setp.lt.u32 	%p3, %r41, %r9;
	@%p3 bra 	$L__BB23_2;

$L__BB23_5:
	shl.b32 	%r12, %r2, 3;
	mov.u32 	%r13, shared_d;
	add.s32 	%r8, %r13, %r12;
	st.shared.f64 	[%r8], %fd34;
	bar.sync 	0;
	setp.gt.u32 	%p4, %r2, 511;
	@%p4 bra 	$L__BB23_7;

	ld.shared.f64 	%fd19, [%r8+4096];
	max.f64 	%fd34, %fd34, %fd19;
	st.shared.f64 	[%r8], %fd34;

$L__BB23_7:
	bar.sync 	0;
	setp.gt.u32 	%p5, %r2, 255;
	@%p5 bra 	$L__BB23_9;

	ld.shared.f64 	%fd20, [%r8+2048];
	max.f64 	%fd34, %fd34, %fd20;
	st.shared.f64 	[%r8], %fd34;

$L__BB23_9:
	bar.sync 	0;
	setp.gt.u32 	%p6, %r2, 127;
	@%p6 bra 	$L__BB23_11;

	ld.shared.f64 	%fd21, [%r8+1024];
	max.f64 	%fd34, %fd34, %fd21;
	st.shared.f64 	[%r8], %fd34;

$L__BB23_11:
	bar.sync 	0;
	setp.gt.u32 	%p7, %r2, 63;
	@%p7 bra 	$L__BB23_13;

	ld.shared.f64 	%fd22, [%r8+512];
	max.f64 	%fd34, %fd34, %fd22;
	st.shared.f64 	[%r8], %fd34;

$L__BB23_13:
	bar.sync 	0;
	setp.gt.u32 	%p8, %r2, 31;
	@%p8 bra 	$L__BB23_16;

	ld.shared.f64 	%fd33, [%r8+256];
	max.f64 	%fd23, %fd34, %fd33;
	// begin inline asm
	mov.b64 {%r14,%r15}, %fd23;
	// end inline asm
	mov.u32 	%r34, 2;
	mov.u32 	%r35, 31;
	mov.u32 	%r36, 16;
	mov.u32 	%r37, -1;
	shfl.sync.down.b32 	%r17|%p9, %r15, %r36, %r35, %r37;
	shfl.sync.down.b32 	%r16|%p10, %r14, %r36, %r35, %r37;
	// begin inline asm
	mov.b64 %fd24, {%r16,%r17};
	// end inline asm
	max.f64 	%fd25, %fd23, %fd24;
	// begin inline asm
	mov.b64 {%r18,%r19}, %fd25;
	// end inline asm
	mov.u32 	%r38, 8;
	shfl.sync.down.b32 	%r21|%p11, %r19, %r38, %r35, %r37;
	shfl.sync.down.b32 	%r20|%p12, %r18, %r38, %r35, %r37;
	// begin inline asm
	mov.b64 %fd26, {%r20,%r21};
	// end inline asm
	max.f64 	%fd27, %fd25, %fd26;
	// begin inline asm
	mov.b64 {%r22,%r23}, %fd27;
	// end inline asm
	mov.u32 	%r39, 4;
	shfl.sync.down.b32 	%r25|%p13, %r23, %r39, %r35, %r37;
	shfl.sync.down.b32 	%r24|%p14, %r22, %r39, %r35, %r37;
	// begin inline asm
	mov.b64 %fd28, {%r24,%r25};
	// end inline asm
	max.f64 	%fd29, %fd27, %fd28;
	// begin inline asm
	mov.b64 {%r26,%r27}, %fd29;
	// end inline asm
	shfl.sync.down.b32 	%r29|%p15, %r27, %r34, %r35, %r37;
	shfl.sync.down.b32 	%r28|%p16, %r26, %r34, %r35, %r37;
	// begin inline asm
	mov.b64 %fd30, {%r28,%r29};
	// end inline asm
	max.f64 	%fd31, %fd29, %fd30;
	// begin inline asm
	mov.b64 {%r30,%r31}, %fd31;
	// end inline asm
	mov.u32 	%r40, 1;
	shfl.sync.down.b32 	%r33|%p17, %r31, %r40, %r35, %r37;
	shfl.sync.down.b32 	%r32|%p18, %r30, %r40, %r35, %r37;
	// begin inline asm
	mov.b64 %fd32, {%r32,%r33};
	// end inline asm
	max.f64 	%fd14, %fd31, %fd32;
	setp.ne.s32 	%p19, %r2, 0;
	@%p19 bra 	$L__BB23_16;

	cvta.to.global.u64 	%rd8, %rd2;
	mul.wide.u32 	%rd9, %r1, 8;
	add.s64 	%rd10, %rd8, %rd9;
	st.global.f64 	[%rd10], %fd14;

$L__BB23_16:
	ret;

}
	// .globl	reduce_or_u32
.visible .entry reduce_or_u32(
	.param .u64 reduce_or_u32_param_0,
	.param .u32 reduce_or_u32_param_1,
	.param .u64 reduce_or_u32_param_2
)
{
	.reg .pred 	%p<15>;
	.reg .b32 	%r<63>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd3, [reduce_or_u32_param_0];
	ld.param.u32 	%r22, [reduce_or_u32_param_1];
	ld.param.u64 	%rd2, [reduce_or_u32_param_2];
	cvta.to.global.u64 	%rd1, %rd3;
	mov.u32 	%r24, %ctaid.x;
	shl.b32 	%r25, %r24, 11;
	mov.u32 	%r1, %tid.x;
	add.s32 	%r55, %r25, %r1;
	setp.ge.u32 	%p1, %r55, %r22;
	mov.u32 	%r56, 0;
	@%p1 bra 	$L__BB24_5;

	mov.u32 	%r27, %nctaid.x;
	shl.b32 	%r3, %r27, 11;

$L__BB24_2:
	mul.wide.u32 	%rd4, %r55, 4;
	add.s64 	%rd5, %rd1, %rd4;
	ld.global.u32 	%r28, [%rd5];
	or.b32  	%r56, %r28, %r56;
	add.s32 	%r7, %r55, 1024;
	setp.ge.u32 	%p2, %r7, %r22;
	@%p2 bra 	$L__BB24_4;

	mul.wide.u32 	%rd6, %r7, 4;
	add.s64 	%rd7, %rd1, %rd6;
	ld.global.u32 	%r29, [%rd7];
	or.b32  	%r56, %r29, %r56;

$L__BB24_4:
	add.s32 	%r55, %r55, %r3;
	setp.lt.u32 	%p3, %r55, %r22;
	@%p3 bra 	$L__BB24_2;

$L__BB24_5:
	shl.b32 	%r30, %r1, 2;
	mov.u32 	%r31, shared;
	add.s32 	%r12, %r31, %r30;
	st.shared.u32 	[%r12], %r56;
	bar.sync 	0;
	setp.gt.u32 	%p4, %r1, 511;
	@%p4 bra 	$L__BB24_7;

	ld.shared.u32 	%r32, [%r12+2048];
	or.b32  	%r56, %r32, %r56;
	st.shared.u32 	[%r12], %r56;

$L__BB24_7:
	bar.sync 	0;
	setp.gt.u32 	%p5, %r1, 255;
	@%p5 bra 	$L__BB24_9;

	ld.shared.u32 	%r33, [%r12+1024];
	or.b32  	%r56, %r33, %r56;
	st.shared.u32 	[%r12], %r56;

$L__BB24_9:
	bar.sync 	0;
	setp.gt.u32 	%p6, %r1, 127;
	@%p6 bra 	$L__BB24_11;

	ld.shared.u32 	%r34, [%r12+512];
	or.b32  	%r56, %r34, %r56;
	st.shared.u32 	[%r12], %r56;

$L__BB24_11:
	bar.sync 	0;
	setp.gt.u32 	%p7, %r1, 63;
	@%p7 bra 	$L__BB24_13;

	ld.shared.u32 	%r35, [%r12+256];
	or.b32  	%r56, %r35, %r56;
	st.shared.u32 	[%r12], %r56;

$L__BB24_13:
	bar.sync 	0;
	setp.gt.u32 	%p8, %r1, 31;
	@%p8 bra 	$L__BB24_16;

	ld.shared.u32 	%r36, [%r12+128];
	or.b32  	%r37, %r36, %r56;
	mov.u32 	%r38, 2;
	mov.u32 	%r39, 31;
	mov.u32 	%r40, 16;
	mov.u32 	%r41, -1;
	shfl.sync.down.b32 	%r42|%p9, %r37, %r40, %r39, %r41;
	or.b32  	%r43, %r42, %r37;
	mov.u32 	%r44, 8;
	shfl.sync.down.b32 	%r45|%p10, %r43, %r44, %r39, %r41;
	or.b32  	%r46, %r45, %r43;
	mov.u32 	%r47, 4;
	shfl.sync.down.b32 	%r48|%p11, %r46, %r47, %r39, %r41;
	or.b32  	%r49, %r48, %r46;
	shfl.sync.down.b32 	%r50|%p12, %r49, %r38, %r39, %r41;
	or.b32  	%r51, %r50, %r49;
	mov.u32 	%r52, 1;
	shfl.sync.down.b32 	%r53|%p13, %r51, %r52, %r39, %r41;
	or.b32  	%r21, %r53, %r51;
	setp.ne.s32 	%p14, %r1, 0;
	@%p14 bra 	$L__BB24_16;

	cvta.to.global.u64 	%rd8, %rd2;
	mul.wide.u32 	%rd9, %r24, 4;
	add.s64 	%rd10, %rd8, %rd9;
	st.global.u32 	[%rd10], %r21;

$L__BB24_16:
	ret;

}
	// .globl	reduce_and_u32
.visible .entry reduce_and_u32(
	.param .u64 reduce_and_u32_param_0,
	.param .u32 reduce_and_u32_param_1,
	.param .u64 reduce_and_u32_param_2
)
{
	.reg .pred 	%p<15>;
	.reg .b32 	%r<63>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd3, [reduce_and_u32_param_0];
	ld.param.u32 	%r22, [reduce_and_u32_param_1];
	ld.param.u64 	%rd2, [reduce_and_u32_param_2];
	cvta.to.global.u64 	%rd1, %rd3;
	mov.u32 	%r24, %ctaid.x;
	shl.b32 	%r25, %r24, 11;
	mov.u32 	%r1, %tid.x;
	add.s32 	%r55, %r25, %r1;
	setp.ge.u32 	%p1, %r55, %r22;
	mov.u32 	%r56, -1;
	@%p1 bra 	$L__BB25_5;

	mov.u32 	%r27, %nctaid.x;
	shl.b32 	%r3, %r27, 11;

$L__BB25_2:
	mul.wide.u32 	%rd4, %r55, 4;
	add.s64 	%rd5, %rd1, %rd4;
	ld.global.u32 	%r28, [%rd5];
	and.b32  	%r56, %r28, %r56;
	add.s32 	%r7, %r55, 1024;
	setp.ge.u32 	%p2, %r7, %r22;
	@%p2 bra 	$L__BB25_4;

	mul.wide.u32 	%rd6, %r7, 4;
	add.s64 	%rd7, %rd1, %rd6;
	ld.global.u32 	%r29, [%rd7];
	and.b32  	%r56, %r29, %r56;

$L__BB25_4:
	add.s32 	%r55, %r55, %r3;
	setp.lt.u32 	%p3, %r55, %r22;
	@%p3 bra 	$L__BB25_2;

$L__BB25_5:
	shl.b32 	%r30, %r1, 2;
	mov.u32 	%r31, shared;
	add.s32 	%r12, %r31, %r30;
	st.shared.u32 	[%r12], %r56;
	bar.sync 	0;
	setp.gt.u32 	%p4, %r1, 511;
	@%p4 bra 	$L__BB25_7;

	ld.shared.u32 	%r32, [%r12+2048];
	and.b32  	%r56, %r32, %r56;
	st.shared.u32 	[%r12], %r56;

$L__BB25_7:
	bar.sync 	0;
	setp.gt.u32 	%p5, %r1, 255;
	@%p5 bra 	$L__BB25_9;

	ld.shared.u32 	%r33, [%r12+1024];
	and.b32  	%r56, %r33, %r56;
	st.shared.u32 	[%r12], %r56;

$L__BB25_9:
	bar.sync 	0;
	setp.gt.u32 	%p6, %r1, 127;
	@%p6 bra 	$L__BB25_11;

	ld.shared.u32 	%r34, [%r12+512];
	and.b32  	%r56, %r34, %r56;
	st.shared.u32 	[%r12], %r56;

$L__BB25_11:
	bar.sync 	0;
	setp.gt.u32 	%p7, %r1, 63;
	@%p7 bra 	$L__BB25_13;

	ld.shared.u32 	%r35, [%r12+256];
	and.b32  	%r56, %r35, %r56;
	st.shared.u32 	[%r12], %r56;

$L__BB25_13:
	bar.sync 	0;
	setp.gt.u32 	%p8, %r1, 31;
	@%p8 bra 	$L__BB25_16;

	ld.shared.u32 	%r36, [%r12+128];
	and.b32  	%r37, %r36, %r56;
	mov.u32 	%r38, 2;
	mov.u32 	%r39, 31;
	mov.u32 	%r40, 16;
	mov.u32 	%r41, -1;
	shfl.sync.down.b32 	%r42|%p9, %r37, %r40, %r39, %r41;
	and.b32  	%r43, %r42, %r37;
	mov.u32 	%r44, 8;
	shfl.sync.down.b32 	%r45|%p10, %r43, %r44, %r39, %r41;
	and.b32  	%r46, %r45, %r43;
	mov.u32 	%r47, 4;
	shfl.sync.down.b32 	%r48|%p11, %r46, %r47, %r39, %r41;
	and.b32  	%r49, %r48, %r46;
	shfl.sync.down.b32 	%r50|%p12, %r49, %r38, %r39, %r41;
	and.b32  	%r51, %r50, %r49;
	mov.u32 	%r52, 1;
	shfl.sync.down.b32 	%r53|%p13, %r51, %r52, %r39, %r41;
	and.b32  	%r21, %r53, %r51;
	setp.ne.s32 	%p14, %r1, 0;
	@%p14 bra 	$L__BB25_16;

	cvta.to.global.u64 	%rd8, %rd2;
	mul.wide.u32 	%rd9, %r24, 4;
	add.s64 	%rd10, %rd8, %rd9;
	st.global.u32 	[%rd10], %r21;

$L__BB25_16:
	ret;

}
	// .globl	scan_small_u32
.visible .entry scan_small_u32(
	.param .u64 scan_small_u32_param_0,
	.param .u64 scan_small_u32_param_1,
	.param .u32 scan_small_u32_param_2
)
{
	.reg .pred 	%p<3>;
	.reg .b32 	%r<38>;
	.reg .b64 	%rd<10>;


	ld.param.u64 	%rd3, [scan_small_u32_param_0];
	ld.param.u64 	%rd2, [scan_small_u32_param_1];
	cvta.to.global.u64 	%rd4, %rd3;
	mov.u32 	%r1, %tid.x;
	cvt.u64.u32 	%rd1, %r1;
	mul.wide.u32 	%rd5, %r1, 16;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.v4.u32 	{%r13, %r14, %r15, %r16}, [%rd6];
	mov.u32 	%r17, 0;
	add.s32 	%r3, %r14, %r13;
	add.s32 	%r4, %r15, %r3;
	add.s32 	%r5, %r16, %r4;
	shl.b32 	%r21, %r1, 2;
	mov.u32 	%r22, shared;
	add.s32 	%r23, %r22, %r21;
	st.shared.u32 	[%r23], %r17;
	mov.u32 	%r6, %ntid.x;
	shl.b32 	%r24, %r6, 2;
	add.s32 	%r7, %r23, %r24;
	st.shared.u32 	[%r7], %r5;
	setp.lt.u32 	%p1, %r6, 2;
	mov.u32 	%r37, %r5;
	@%p1 bra 	$L__BB26_3;

	add.s32 	%r8, %r1, %r6;
	mov.u32 	%r36, 1;

$L__BB26_2:
	bar.sync 	0;
	sub.s32 	%r26, %r8, %r36;
	shl.b32 	%r27, %r26, 2;
	add.s32 	%r29, %r22, %r27;
	ld.shared.u32 	%r30, [%r29];
	ld.shared.u32 	%r31, [%r7];
	add.s32 	%r37, %r30, %r31;
	bar.sync 	0;
	st.shared.u32 	[%r7], %r37;
	shl.b32 	%r36, %r36, 1;
	setp.lt.u32 	%p2, %r36, %r6;
	@%p2 bra 	$L__BB26_2;

$L__BB26_3:
	cvta.to.global.u64 	%rd7, %rd2;
	shl.b64 	%rd8, %rd1, 4;
	add.s64 	%rd9, %rd7, %rd8;
	sub.s32 	%r32, %r37, %r5;
	add.s32 	%r33, %r32, %r4;
	add.s32 	%r34, %r32, %r3;
	add.s32 	%r35, %r32, %r13;
	st.global.v4.u32 	[%rd9], {%r32, %r35, %r34, %r33};
	ret;

}
	// .globl	scan_large_u32_init
.visible .entry scan_large_u32_init(
	.param .u64 scan_large_u32_init_param_0,
	.param .u32 scan_large_u32_init_param_1
)
{
	.reg .pred 	%p<4>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<6>;


	ld.param.u64 	%rd2, [scan_large_u32_init_param_0];
	ld.param.u32 	%r6, [scan_large_u32_init_param_1];
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r10, %r7, %r1, %r8;
	setp.ge.u32 	%p1, %r10, %r6;
	@%p1 bra 	$L__BB27_3;

	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r9;
	cvta.to.global.u64 	%rd1, %rd2;

$L__BB27_2:
	setp.lt.u32 	%p2, %r10, 32;
	selp.b64 	%rd3, 2, 0, %p2;
	mul.wide.u32 	%rd4, %r10, 8;
	add.s64 	%rd5, %rd1, %rd4;
	st.global.u64 	[%rd5], %rd3;
	add.s32 	%r10, %r10, %r3;
	setp.lt.u32 	%p3, %r10, %r6;
	@%p3 bra 	$L__BB27_2;

$L__BB27_3:
	ret;

}
	// .globl	scan_large_u32
.visible .entry scan_large_u32(
	.param .u64 scan_large_u32_param_0,
	.param .u64 scan_large_u32_param_1,
	.param .u64 scan_large_u32_param_2
)
{
	.reg .pred 	%p<15>;
	.reg .b32 	%r<202>;
	.reg .b64 	%rd<26>;


	ld.param.u64 	%rd6, [scan_large_u32_param_0];
	ld.param.u64 	%rd5, [scan_large_u32_param_1];
	ld.param.u64 	%rd7, [scan_large_u32_param_2];
	cvta.to.global.u64 	%rd8, %rd6;
	mov.u32 	%r32, %ctaid.x;
	shl.b32 	%r33, %r32, 9;
	mov.u32 	%r1, %tid.x;
	add.s32 	%r34, %r33, %r1;
	cvt.u64.u32 	%rd1, %r34;
	mul.wide.u32 	%rd9, %r34, 16;
	add.s64 	%rd10, %rd8, %rd9;
	ld.global.v4.u32 	{%r35, %r36, %r37, %r38}, [%rd10];
	ld.global.v4.u32 	{%r43, %r44, %r45, %r46}, [%rd10+2048];
	ld.global.v4.u32 	{%r51, %r52, %r53, %r54}, [%rd10+4096];
	ld.global.v4.u32 	{%r59, %r60, %r61, %r62}, [%rd10+6144];
	shl.b32 	%r67, %r1, 4;
	mov.u32 	%r68, shared;
	add.s32 	%r2, %r68, %r67;
	mov.u32 	%r201, 0;
	st.shared.v4.u32 	[%r2], {%r35, %r36, %r37, %r38};
	st.shared.v4.u32 	[%r2+2048], {%r43, %r44, %r45, %r46};
	st.shared.v4.u32 	[%r2+4096], {%r51, %r52, %r53, %r54};
	st.shared.v4.u32 	[%r2+6144], {%r59, %r60, %r61, %r62};
	bar.sync 	0;
	shl.b32 	%r70, %r1, 2;
	shl.b32 	%r71, %r1, 6;
	add.s32 	%r3, %r68, %r71;
	ld.shared.v4.u32 	{%r72, %r73, %r74, %r75}, [%r3];
	ld.shared.v4.u32 	{%r79, %r80, %r81, %r82}, [%r3+16];
	ld.shared.v4.u32 	{%r87, %r88, %r89, %r90}, [%r3+32];
	ld.shared.v4.u32 	{%r95, %r96, %r97, %r98}, [%r3+48];
	add.s32 	%r5, %r73, %r72;
	add.s32 	%r6, %r74, %r5;
	add.s32 	%r7, %r75, %r6;
	add.s32 	%r8, %r79, %r7;
	add.s32 	%r9, %r80, %r8;
	add.s32 	%r10, %r81, %r9;
	add.s32 	%r11, %r82, %r10;
	add.s32 	%r12, %r87, %r11;
	add.s32 	%r13, %r88, %r12;
	add.s32 	%r14, %r89, %r13;
	add.s32 	%r15, %r90, %r14;
	add.s32 	%r16, %r95, %r15;
	add.s32 	%r17, %r96, %r16;
	add.s32 	%r18, %r97, %r17;
	add.s32 	%r19, %r98, %r18;
	bar.sync 	0;
	add.s32 	%r103, %r68, %r70;
	st.shared.u32 	[%r103], %r201;
	st.shared.u32 	[%r103+512], %r19;
	bar.sync 	0;
	ld.shared.u32 	%r104, [%r103+508];
	ld.shared.u32 	%r105, [%r103+512];
	add.s32 	%r106, %r104, %r105;
	bar.sync 	0;
	st.shared.u32 	[%r103+512], %r106;
	bar.sync 	0;
	ld.shared.u32 	%r107, [%r103+504];
	ld.shared.u32 	%r108, [%r103+512];
	add.s32 	%r109, %r107, %r108;
	bar.sync 	0;
	st.shared.u32 	[%r103+512], %r109;
	bar.sync 	0;
	ld.shared.u32 	%r110, [%r103+496];
	ld.shared.u32 	%r111, [%r103+512];
	add.s32 	%r112, %r110, %r111;
	bar.sync 	0;
	st.shared.u32 	[%r103+512], %r112;
	bar.sync 	0;
	ld.shared.u32 	%r113, [%r103+480];
	ld.shared.u32 	%r114, [%r103+512];
	add.s32 	%r115, %r113, %r114;
	bar.sync 	0;
	st.shared.u32 	[%r103+512], %r115;
	bar.sync 	0;
	ld.shared.u32 	%r116, [%r103+448];
	ld.shared.u32 	%r117, [%r103+512];
	add.s32 	%r118, %r116, %r117;
	bar.sync 	0;
	st.shared.u32 	[%r103+512], %r118;
	bar.sync 	0;
	ld.shared.u32 	%r119, [%r103+384];
	ld.shared.u32 	%r120, [%r103+512];
	add.s32 	%r121, %r119, %r120;
	bar.sync 	0;
	st.shared.u32 	[%r103+512], %r121;
	bar.sync 	0;
	ld.shared.u32 	%r122, [%r103+256];
	ld.shared.u32 	%r123, [%r103+512];
	add.s32 	%r20, %r122, %r123;
	bar.sync 	0;
	st.shared.u32 	[%r103+512], %r20;
	mul.wide.u32 	%rd11, %r32, 8;
	add.s64 	%rd2, %rd7, %rd11;
	setp.ne.s32 	%p1, %r1, 127;
	@%p1 bra 	$L__BB28_2;

	cvt.u64.u32 	%rd14, %r20;
	shl.b64 	%rd15, %rd14, 32;
	or.b64  	%rd13, %rd15, 1;
	// begin inline asm
	st.cg.u64 [%rd2], %rd13;
	// end inline asm

$L__BB28_2:
	mov.u32 	%r21, WARP_SZ;
	add.s32 	%r125, %r21, -1;
	and.b32  	%r22, %r125, %r1;
	sub.s32 	%r200, %r22, %r21;
	cvta.to.global.u64 	%rd3, %rd5;
	bra.uni 	$L__BB28_3;

$L__BB28_8:
	add.s32 	%r201, %r201, %r28;
	sub.s32 	%r200, %r200, %r21;

$L__BB28_3:
	mul.wide.s32 	%rd18, %r200, 8;
	add.s64 	%rd17, %rd2, %rd18;
	// begin inline asm
	ld.cg.u64 %rd16, [%rd17];
	// end inline asm
	cvt.u32.u64 	%r26, %rd16;
	setp.eq.s32 	%p2, %r26, 0;
	mov.u32 	%r126, -1;
	vote.sync.any.pred 	%p3, %p2, %r126;
	@%p3 bra 	$L__BB28_3;

	setp.eq.s32 	%p4, %r26, 2;
	vote.sync.ballot.b32 	%r27, %p4, %r126;
	setp.eq.s32 	%p6, %r27, 0;
	shr.u64 	%rd19, %rd16, 32;
	cvt.u32.u64 	%r28, %rd19;
	@%p6 bra 	$L__BB28_8;

	clz.b32 	%r129, %r27;
	mov.u32 	%r130, 31;
	sub.s32 	%r131, %r130, %r129;
	setp.lt.u32 	%p8, %r22, %r131;
	selp.b32 	%r132, 0, %r28, %p8;
	mov.u32 	%r133, 0;
	add.s32 	%r134, %r132, %r201;
	mov.u32 	%r135, 2;
	mov.u32 	%r136, 16;
	mov.u32 	%r137, -1;
	shfl.sync.down.b32 	%r138|%p9, %r134, %r136, %r130, %r137;
	add.s32 	%r139, %r138, %r134;
	mov.u32 	%r140, 8;
	shfl.sync.down.b32 	%r141|%p10, %r139, %r140, %r130, %r137;
	add.s32 	%r142, %r141, %r139;
	mov.u32 	%r143, 4;
	shfl.sync.down.b32 	%r144|%p11, %r142, %r143, %r130, %r137;
	add.s32 	%r145, %r144, %r142;
	shfl.sync.down.b32 	%r146|%p12, %r145, %r135, %r130, %r137;
	add.s32 	%r147, %r146, %r145;
	mov.u32 	%r148, 1;
	shfl.sync.down.b32 	%r149|%p13, %r147, %r148, %r130, %r137;
	add.s32 	%r150, %r149, %r147;
	shfl.sync.idx.b32 	%r151|%p14, %r150, %r133, %r130, %r137;
	add.s32 	%r29, %r151, %r20;
	@%p1 bra 	$L__BB28_7;

	cvt.u64.u32 	%rd22, %r29;
	shl.b64 	%rd23, %rd22, 32;
	or.b64  	%rd21, %rd23, 2;
	// begin inline asm
	st.cg.u64 [%rd2], %rd21;
	// end inline asm

$L__BB28_7:
	sub.s32 	%r152, %r29, %r19;
	add.s32 	%r153, %r152, %r6;
	add.s32 	%r154, %r152, %r5;
	add.s32 	%r155, %r152, %r72;
	st.shared.v4.u32 	[%r3], {%r152, %r155, %r154, %r153};
	add.s32 	%r156, %r152, %r10;
	add.s32 	%r157, %r152, %r9;
	add.s32 	%r158, %r152, %r8;
	add.s32 	%r159, %r152, %r7;
	st.shared.v4.u32 	[%r3+16], {%r159, %r158, %r157, %r156};
	add.s32 	%r160, %r152, %r14;
	add.s32 	%r161, %r152, %r13;
	add.s32 	%r162, %r152, %r12;
	add.s32 	%r163, %r152, %r11;
	st.shared.v4.u32 	[%r3+32], {%r163, %r162, %r161, %r160};
	add.s32 	%r164, %r152, %r18;
	add.s32 	%r165, %r152, %r17;
	add.s32 	%r166, %r152, %r16;
	add.s32 	%r167, %r152, %r15;
	st.shared.v4.u32 	[%r3+48], {%r167, %r166, %r165, %r164};
	bar.sync 	0;
	shl.b64 	%rd24, %rd1, 4;
	add.s64 	%rd25, %rd3, %rd24;
	ld.shared.v4.u32 	{%r168, %r169, %r170, %r171}, [%r2];
	st.global.v4.u32 	[%rd25], {%r168, %r169, %r170, %r171};
	ld.shared.v4.u32 	{%r176, %r177, %r178, %r179}, [%r2+2048];
	st.global.v4.u32 	[%rd25+2048], {%r176, %r177, %r178, %r179};
	ld.shared.v4.u32 	{%r184, %r185, %r186, %r187}, [%r2+4096];
	st.global.v4.u32 	[%rd25+4096], {%r184, %r185, %r186, %r187};
	ld.shared.v4.u32 	{%r192, %r193, %r194, %r195}, [%r2+6144];
	st.global.v4.u32 	[%rd25+6144], {%r192, %r193, %r194, %r195};
	ret;

}
	// .globl	compress_small
.visible .entry compress_small(
	.param .u64 compress_small_param_0,
	.param .u64 compress_small_param_1,
	.param .u32 compress_small_param_2,
	.param .u64 compress_small_param_3
)
{
	.reg .pred 	%p<8>;
	.reg .b32 	%r<44>;
	.reg .b64 	%rd<17>;


	ld.param.u64 	%rd3, [compress_small_param_0];
	ld.param.u64 	%rd4, [compress_small_param_1];
	ld.param.u64 	%rd2, [compress_small_param_3];
	cvta.to.global.u64 	%rd1, %rd4;
	cvta.to.global.u64 	%rd5, %rd3;
	mov.u32 	%r1, %tid.x;
	mul.wide.u32 	%rd6, %r1, 4;
	add.s64 	%rd7, %rd5, %rd6;
	ld.global.u32 	%r18, [%rd7];
	and.b32  	%r2, %r18, 255;
	shr.u32 	%r19, %r18, 8;
	and.b32  	%r20, %r19, 255;
	add.s32 	%r3, %r2, %r20;
	shr.u32 	%r21, %r18, 16;
	and.b32  	%r22, %r21, 255;
	add.s32 	%r4, %r3, %r22;
	shr.u32 	%r23, %r18, 24;
	add.s32 	%r5, %r4, %r23;
	shl.b32 	%r24, %r1, 2;
	mov.u32 	%r25, shared;
	add.s32 	%r26, %r25, %r24;
	mov.u32 	%r27, 0;
	st.shared.u32 	[%r26], %r27;
	mov.u32 	%r6, %ntid.x;
	shl.b32 	%r28, %r6, 2;
	add.s32 	%r7, %r26, %r28;
	st.shared.u32 	[%r7], %r5;
	setp.lt.u32 	%p1, %r6, 2;
	mov.u32 	%r43, %r5;
	@%p1 bra 	$L__BB29_3;

	add.s32 	%r8, %r1, %r6;
	mov.u32 	%r42, 1;

$L__BB29_2:
	bar.sync 	0;
	sub.s32 	%r30, %r8, %r42;
	shl.b32 	%r31, %r30, 2;
	add.s32 	%r33, %r25, %r31;
	ld.shared.u32 	%r34, [%r33];
	ld.shared.u32 	%r35, [%r7];
	add.s32 	%r43, %r34, %r35;
	bar.sync 	0;
	st.shared.u32 	[%r7], %r43;
	shl.b32 	%r42, %r42, 1;
	setp.lt.u32 	%p2, %r42, %r6;
	@%p2 bra 	$L__BB29_2;

$L__BB29_3:
	add.s32 	%r37, %r6, -1;
	setp.ne.s32 	%p3, %r1, %r37;
	@%p3 bra 	$L__BB29_5;

	cvta.to.global.u64 	%rd8, %rd2;
	st.global.u32 	[%rd8], %r43;

$L__BB29_5:
	sub.s32 	%r13, %r43, %r5;
	add.s32 	%r14, %r13, %r2;
	add.s32 	%r15, %r13, %r3;
	add.s32 	%r16, %r13, %r4;
	setp.eq.s32 	%p4, %r2, 0;
	@%p4 bra 	$L__BB29_7;

	mul.wide.u32 	%rd9, %r13, 4;
	add.s64 	%rd10, %rd1, %rd9;
	st.global.u32 	[%rd10], %r24;

$L__BB29_7:
	setp.eq.s32 	%p5, %r14, %r15;
	@%p5 bra 	$L__BB29_9;

	add.s32 	%r39, %r24, 1;
	mul.wide.u32 	%rd11, %r14, 4;
	add.s64 	%rd12, %rd1, %rd11;
	st.global.u32 	[%rd12], %r39;

$L__BB29_9:
	setp.eq.s32 	%p6, %r15, %r16;
	@%p6 bra 	$L__BB29_11;

	add.s32 	%r40, %r24, 2;
	mul.wide.u32 	%rd13, %r15, 4;
	add.s64 	%rd14, %rd1, %rd13;
	st.global.u32 	[%rd14], %r40;

$L__BB29_11:
	setp.eq.s32 	%p7, %r16, %r43;
	@%p7 bra 	$L__BB29_13;

	add.s32 	%r41, %r24, 3;
	mul.wide.u32 	%rd15, %r16, 4;
	add.s64 	%rd16, %rd1, %rd15;
	st.global.u32 	[%rd16], %r41;

$L__BB29_13:
	ret;

}
	// .globl	compress_large
.visible .entry compress_large(
	.param .u64 compress_large_param_0,
	.param .u64 compress_large_param_1,
	.param .u64 compress_large_param_2,
	.param .u64 compress_large_param_3
)
{
	.reg .pred 	%p<32>;
	.reg .b32 	%r<152>;
	.reg .b64 	%rd<57>;


	ld.param.u64 	%rd6, [compress_large_param_0];
	ld.param.u64 	%rd7, [compress_large_param_1];
	ld.param.u64 	%rd8, [compress_large_param_2];
	ld.param.u64 	%rd5, [compress_large_param_3];
	cvta.to.global.u64 	%rd1, %rd7;
	cvta.to.global.u64 	%rd9, %rd6;
	mov.u32 	%r1, %ctaid.x;
	shl.b32 	%r49, %r1, 7;
	mov.u32 	%r2, %tid.x;
	add.s32 	%r3, %r49, %r2;
	mul.wide.u32 	%rd10, %r3, 16;
	add.s64 	%rd11, %rd9, %rd10;
	ld.global.v4.u32 	{%r50, %r51, %r52, %r53}, [%rd11];
	mov.u32 	%r150, 0;
	and.b32  	%r4, %r50, 255;
	shr.u32 	%r59, %r50, 8;
	and.b32  	%r60, %r59, 255;
	add.s32 	%r5, %r4, %r60;
	shr.u32 	%r61, %r50, 16;
	and.b32  	%r62, %r61, 255;
	add.s32 	%r6, %r5, %r62;
	shr.u32 	%r63, %r50, 24;
	add.s32 	%r7, %r6, %r63;
	and.b32  	%r64, %r51, 255;
	add.s32 	%r8, %r7, %r64;
	shr.u32 	%r65, %r51, 8;
	and.b32  	%r66, %r65, 255;
	add.s32 	%r9, %r8, %r66;
	shr.u32 	%r67, %r51, 16;
	and.b32  	%r68, %r67, 255;
	add.s32 	%r10, %r9, %r68;
	shr.u32 	%r69, %r51, 24;
	add.s32 	%r11, %r10, %r69;
	and.b32  	%r70, %r52, 255;
	add.s32 	%r12, %r11, %r70;
	shr.u32 	%r71, %r52, 8;
	and.b32  	%r72, %r71, 255;
	add.s32 	%r13, %r12, %r72;
	shr.u32 	%r73, %r52, 16;
	and.b32  	%r74, %r73, 255;
	add.s32 	%r14, %r13, %r74;
	shr.u32 	%r75, %r52, 24;
	add.s32 	%r15, %r14, %r75;
	and.b32  	%r76, %r53, 255;
	add.s32 	%r16, %r15, %r76;
	shr.u32 	%r77, %r53, 8;
	and.b32  	%r78, %r77, 255;
	add.s32 	%r17, %r16, %r78;
	shr.u32 	%r79, %r53, 16;
	and.b32  	%r80, %r79, 255;
	add.s32 	%r18, %r17, %r80;
	shr.u32 	%r81, %r53, 24;
	add.s32 	%r19, %r18, %r81;
	shl.b32 	%r82, %r2, 2;
	mov.u32 	%r83, shared;
	add.s32 	%r84, %r83, %r82;
	st.shared.u32 	[%r84], %r150;
	st.shared.u32 	[%r84+512], %r19;
	bar.sync 	0;
	ld.shared.u32 	%r85, [%r84+508];
	ld.shared.u32 	%r86, [%r84+512];
	add.s32 	%r87, %r85, %r86;
	bar.sync 	0;
	st.shared.u32 	[%r84+512], %r87;
	bar.sync 	0;
	ld.shared.u32 	%r88, [%r84+504];
	ld.shared.u32 	%r89, [%r84+512];
	add.s32 	%r90, %r88, %r89;
	bar.sync 	0;
	st.shared.u32 	[%r84+512], %r90;
	bar.sync 	0;
	ld.shared.u32 	%r91, [%r84+496];
	ld.shared.u32 	%r92, [%r84+512];
	add.s32 	%r93, %r91, %r92;
	bar.sync 	0;
	st.shared.u32 	[%r84+512], %r93;
	bar.sync 	0;
	ld.shared.u32 	%r94, [%r84+480];
	ld.shared.u32 	%r95, [%r84+512];
	add.s32 	%r96, %r94, %r95;
	bar.sync 	0;
	st.shared.u32 	[%r84+512], %r96;
	bar.sync 	0;
	ld.shared.u32 	%r97, [%r84+448];
	ld.shared.u32 	%r98, [%r84+512];
	add.s32 	%r99, %r97, %r98;
	bar.sync 	0;
	st.shared.u32 	[%r84+512], %r99;
	bar.sync 	0;
	ld.shared.u32 	%r100, [%r84+384];
	ld.shared.u32 	%r101, [%r84+512];
	add.s32 	%r102, %r100, %r101;
	bar.sync 	0;
	st.shared.u32 	[%r84+512], %r102;
	bar.sync 	0;
	ld.shared.u32 	%r103, [%r84+256];
	ld.shared.u32 	%r104, [%r84+512];
	add.s32 	%r20, %r103, %r104;
	bar.sync 	0;
	st.shared.u32 	[%r84+512], %r20;
	mul.wide.u32 	%rd12, %r1, 8;
	add.s64 	%rd2, %rd8, %rd12;
	setp.ne.s32 	%p1, %r2, 127;
	@%p1 bra 	$L__BB30_2;

	cvt.u64.u32 	%rd15, %r20;
	shl.b64 	%rd16, %rd15, 32;
	or.b64  	%rd14, %rd16, 1;
	// begin inline asm
	st.cg.u64 [%rd2], %rd14;
	// end inline asm

$L__BB30_2:
	mov.u32 	%r21, WARP_SZ;
	add.s32 	%r106, %r21, -1;
	and.b32  	%r22, %r106, %r2;
	sub.s32 	%r151, %r22, %r21;
	cvta.to.global.u64 	%rd3, %rd5;
	bra.uni 	$L__BB30_3;

$L__BB30_41:
	add.s32 	%r150, %r150, %r28;
	sub.s32 	%r151, %r151, %r21;

$L__BB30_3:
	mul.wide.s32 	%rd19, %r151, 8;
	add.s64 	%rd18, %rd2, %rd19;
	// begin inline asm
	ld.cg.u64 %rd17, [%rd18];
	// end inline asm
	cvt.u32.u64 	%r26, %rd17;
	setp.eq.s32 	%p2, %r26, 0;
	mov.u32 	%r107, -1;
	vote.sync.any.pred 	%p3, %p2, %r107;
	@%p3 bra 	$L__BB30_3;

	setp.eq.s32 	%p4, %r26, 2;
	vote.sync.ballot.b32 	%r27, %p4, %r107;
	setp.eq.s32 	%p6, %r27, 0;
	shr.u64 	%rd20, %rd17, 32;
	cvt.u32.u64 	%r28, %rd20;
	@%p6 bra 	$L__BB30_41;

	clz.b32 	%r110, %r27;
	mov.u32 	%r111, 31;
	sub.s32 	%r112, %r111, %r110;
	setp.lt.u32 	%p8, %r22, %r112;
	selp.b32 	%r113, 0, %r28, %p8;
	mov.u32 	%r114, 0;
	add.s32 	%r115, %r113, %r150;
	mov.u32 	%r116, 2;
	mov.u32 	%r117, 16;
	mov.u32 	%r118, -1;
	shfl.sync.down.b32 	%r119|%p9, %r115, %r117, %r111, %r118;
	add.s32 	%r120, %r119, %r115;
	mov.u32 	%r121, 8;
	shfl.sync.down.b32 	%r122|%p10, %r120, %r121, %r111, %r118;
	add.s32 	%r123, %r122, %r120;
	mov.u32 	%r124, 4;
	shfl.sync.down.b32 	%r125|%p11, %r123, %r124, %r111, %r118;
	add.s32 	%r126, %r125, %r123;
	shfl.sync.down.b32 	%r127|%p12, %r126, %r116, %r111, %r118;
	add.s32 	%r128, %r127, %r126;
	mov.u32 	%r129, 1;
	shfl.sync.down.b32 	%r130|%p13, %r128, %r129, %r111, %r118;
	add.s32 	%r131, %r130, %r128;
	shfl.sync.idx.b32 	%r132|%p14, %r131, %r114, %r111, %r118;
	add.s32 	%r29, %r132, %r20;
	@%p1 bra 	$L__BB30_8;

	cvt.u64.u32 	%rd23, %r29;
	shl.b64 	%rd24, %rd23, 32;
	or.b64  	%rd22, %rd24, 2;
	// begin inline asm
	st.cg.u64 [%rd2], %rd22;
	// end inline asm
	mov.u32 	%r133, %nctaid.x;
	add.s32 	%r134, %r133, -1;
	setp.ne.s32 	%p15, %r1, %r134;
	@%p15 bra 	$L__BB30_8;

	st.global.u32 	[%rd3], %r29;

$L__BB30_8:
	sub.s32 	%r30, %r29, %r19;
	add.s32 	%r31, %r30, %r4;
	add.s32 	%r32, %r30, %r5;
	add.s32 	%r33, %r30, %r6;
	add.s32 	%r34, %r30, %r7;
	add.s32 	%r35, %r30, %r8;
	add.s32 	%r36, %r30, %r9;
	add.s32 	%r37, %r30, %r10;
	add.s32 	%r38, %r30, %r11;
	add.s32 	%r39, %r30, %r12;
	add.s32 	%r40, %r30, %r13;
	add.s32 	%r41, %r30, %r14;
	add.s32 	%r42, %r30, %r15;
	add.s32 	%r43, %r30, %r16;
	add.s32 	%r44, %r30, %r17;
	add.s32 	%r45, %r30, %r18;
	shl.b32 	%r46, %r3, 4;
	setp.eq.s32 	%p16, %r4, 0;
	@%p16 bra 	$L__BB30_10;

	mul.wide.u32 	%rd25, %r30, 4;
	add.s64 	%rd26, %rd1, %rd25;
	st.global.u32 	[%rd26], %r46;

$L__BB30_10:
	setp.eq.s32 	%p17, %r31, %r32;
	@%p17 bra 	$L__BB30_12;

	add.s32 	%r135, %r46, 1;
	mul.wide.u32 	%rd27, %r31, 4;
	add.s64 	%rd28, %rd1, %rd27;
	st.global.u32 	[%rd28], %r135;

$L__BB30_12:
	setp.eq.s32 	%p18, %r32, %r33;
	@%p18 bra 	$L__BB30_14;

	add.s32 	%r136, %r46, 2;
	mul.wide.u32 	%rd29, %r32, 4;
	add.s64 	%rd30, %rd1, %rd29;
	st.global.u32 	[%rd30], %r136;

$L__BB30_14:
	setp.eq.s32 	%p19, %r33, %r34;
	@%p19 bra 	$L__BB30_16;

	add.s32 	%r137, %r46, 3;
	mul.wide.u32 	%rd31, %r33, 4;
	add.s64 	%rd32, %rd1, %rd31;
	st.global.u32 	[%rd32], %r137;

$L__BB30_16:
	setp.eq.s32 	%p20, %r34, %r35;
	@%p20 bra 	$L__BB30_18;

	add.s32 	%r138, %r46, 4;
	mul.wide.u32 	%rd33, %r34, 4;
	add.s64 	%rd34, %rd1, %rd33;
	st.global.u32 	[%rd34], %r138;

$L__BB30_18:
	setp.eq.s32 	%p21, %r35, %r36;
	@%p21 bra 	$L__BB30_20;

	add.s32 	%r139, %r46, 5;
	mul.wide.u32 	%rd35, %r35, 4;
	add.s64 	%rd36, %rd1, %rd35;
	st.global.u32 	[%rd36], %r139;

$L__BB30_20:
	setp.eq.s32 	%p22, %r36, %r37;
	@%p22 bra 	$L__BB30_22;

	add.s32 	%r140, %r46, 6;
	mul.wide.u32 	%rd37, %r36, 4;
	add.s64 	%rd38, %rd1, %rd37;
	st.global.u32 	[%rd38], %r140;

$L__BB30_22:
	setp.eq.s32 	%p23, %r37, %r38;
	@%p23 bra 	$L__BB30_24;

	add.s32 	%r141, %r46, 7;
	mul.wide.u32 	%rd39, %r37, 4;
	add.s64 	%rd40, %rd1, %rd39;
	st.global.u32 	[%rd40], %r141;

$L__BB30_24:
	setp.eq.s32 	%p24, %r38, %r39;
	@%p24 bra 	$L__BB30_26;

	add.s32 	%r142, %r46, 8;
	mul.wide.u32 	%rd41, %r38, 4;
	add.s64 	%rd42, %rd1, %rd41;
	st.global.u32 	[%rd42], %r142;

$L__BB30_26:
	setp.eq.s32 	%p25, %r39, %r40;
	@%p25 bra 	$L__BB30_28;

	add.s32 	%r143, %r46, 9;
	mul.wide.u32 	%rd43, %r39, 4;
	add.s64 	%rd44, %rd1, %rd43;
	st.global.u32 	[%rd44], %r143;

$L__BB30_28:
	setp.eq.s32 	%p26, %r40, %r41;
	@%p26 bra 	$L__BB30_30;

	add.s32 	%r144, %r46, 10;
	mul.wide.u32 	%rd45, %r40, 4;
	add.s64 	%rd46, %rd1, %rd45;
	st.global.u32 	[%rd46], %r144;

$L__BB30_30:
	setp.eq.s32 	%p27, %r41, %r42;
	@%p27 bra 	$L__BB30_32;

	add.s32 	%r145, %r46, 11;
	mul.wide.u32 	%rd47, %r41, 4;
	add.s64 	%rd48, %rd1, %rd47;
	st.global.u32 	[%rd48], %r145;

$L__BB30_32:
	setp.eq.s32 	%p28, %r42, %r43;
	@%p28 bra 	$L__BB30_34;

	add.s32 	%r146, %r46, 12;
	mul.wide.u32 	%rd49, %r42, 4;
	add.s64 	%rd50, %rd1, %rd49;
	st.global.u32 	[%rd50], %r146;

$L__BB30_34:
	setp.eq.s32 	%p29, %r43, %r44;
	@%p29 bra 	$L__BB30_36;

	add.s32 	%r147, %r46, 13;
	mul.wide.u32 	%rd51, %r43, 4;
	add.s64 	%rd52, %rd1, %rd51;
	st.global.u32 	[%rd52], %r147;

$L__BB30_36:
	setp.eq.s32 	%p30, %r44, %r45;
	@%p30 bra 	$L__BB30_38;

	add.s32 	%r148, %r46, 14;
	mul.wide.u32 	%rd53, %r44, 4;
	add.s64 	%rd54, %rd1, %rd53;
	st.global.u32 	[%rd54], %r148;

$L__BB30_38:
	setp.eq.s32 	%p31, %r45, %r29;
	@%p31 bra 	$L__BB30_40;

	add.s32 	%r149, %r46, 15;
	mul.wide.u32 	%rd55, %r45, 4;
	add.s64 	%rd56, %rd1, %rd55;
	st.global.u32 	[%rd56], %r149;

$L__BB30_40:
	ret;

}
	// .globl	mkperm_phase_1_tiny
.visible .entry mkperm_phase_1_tiny(
	.param .u64 mkperm_phase_1_tiny_param_0,
	.param .u64 mkperm_phase_1_tiny_param_1,
	.param .u32 mkperm_phase_1_tiny_param_2,
	.param .u32 mkperm_phase_1_tiny_param_3,
	.param .u32 mkperm_phase_1_tiny_param_4
)
{
	.reg .pred 	%p<12>;
	.reg .b32 	%r<53>;
	.reg .b64 	%rd<12>;


	ld.param.u64 	%rd4, [mkperm_phase_1_tiny_param_0];
	ld.param.u64 	%rd5, [mkperm_phase_1_tiny_param_1];
	ld.param.u32 	%r23, [mkperm_phase_1_tiny_param_2];
	ld.param.u32 	%r25, [mkperm_phase_1_tiny_param_3];
	ld.param.u32 	%r24, [mkperm_phase_1_tiny_param_4];
	mov.u32 	%r1, %ctaid.x;
	mul.lo.s32 	%r2, %r1, %r25;
	add.s32 	%r3, %r2, %r25;
	mov.u32 	%r4, WARP_SZ;
	mov.u32 	%r5, %ntid.x;
	div.u32 	%r26, %r5, %r4;
	mov.u32 	%r52, %tid.x;
	mul.lo.s32 	%r7, %r26, %r24;
	setp.ge.u32 	%p2, %r52, %r7;
	@%p2 bra 	$L__BB31_3;

	mov.u32 	%r49, %r52;

$L__BB31_2:
	shl.b32 	%r27, %r49, 2;
	mov.u32 	%r28, shared;
	add.s32 	%r29, %r28, %r27;
	mov.u32 	%r30, 0;
	st.shared.u32 	[%r29], %r30;
	add.s32 	%r49, %r49, %r5;
	setp.lt.u32 	%p3, %r49, %r7;
	@%p3 bra 	$L__BB31_2;

$L__BB31_3:
	bar.sync 	0;
	add.s32 	%r50, %r2, %r52;
	setp.ge.u32 	%p4, %r50, %r3;
	@%p4 bra 	$L__BB31_10;

	add.s32 	%r31, %r4, -1;
	and.b32  	%r11, %r31, %r52;
	cvta.to.global.u64 	%rd1, %rd4;
	div.u32 	%r32, %r52, %r4;
	mul.lo.s32 	%r12, %r32, %r24;

$L__BB31_5:
	setp.ge.u32 	%p5, %r50, %r23;
	setp.lt.u32 	%p6, %r50, %r23;
	mov.u32 	%r33, -1;
	vote.sync.ballot.b32 	%r14, %p6, %r33;
	@%p5 bra 	$L__BB31_9;

	mul.wide.u32 	%rd6, %r50, 4;
	add.s64 	%rd7, %rd1, %rd6;
	ld.global.u32 	%r15, [%rd7];
	match.any.sync.b32 	%r16, %r15, %r14;
	brev.b32 	%r35, %r16;
	bfind.shiftamt.u32 	%r17, %r35;
	setp.ne.s32 	%p7, %r11, %r17;
	mov.u32 	%r51, 0;
	@%p7 bra 	$L__BB31_8;

	add.s32 	%r36, %r15, %r12;
	shl.b32 	%r37, %r36, 2;
	mov.u32 	%r38, shared;
	add.s32 	%r39, %r38, %r37;
	popc.b32 	%r40, %r16;
	ld.shared.u32 	%r51, [%r39];
	add.s32 	%r41, %r51, %r40;
	st.shared.u32 	[%r39], %r41;

$L__BB31_8:
	mov.u32 	%r42, 31;
	shfl.sync.idx.b32 	%r43|%p8, %r51, %r17, %r42, %r16;

$L__BB31_9:
	bar.warp.sync 	-1;
	add.s32 	%r50, %r50, %r5;
	setp.lt.u32 	%p9, %r50, %r3;
	@%p9 bra 	$L__BB31_5;

$L__BB31_10:
	bar.sync 	0;
	@%p2 bra 	$L__BB31_13;

	cvta.to.global.u64 	%rd2, %rd5;
	mul.lo.s32 	%r44, %r7, %r1;
	cvt.u64.u32 	%rd3, %r44;
	mov.u32 	%r46, shared;

$L__BB31_12:
	shl.b32 	%r45, %r52, 2;
	add.s32 	%r47, %r46, %r45;
	ld.shared.u32 	%r48, [%r47];
	cvt.u64.u32 	%rd8, %r52;
	add.s64 	%rd9, %rd8, %rd3;
	shl.b64 	%rd10, %rd9, 2;
	add.s64 	%rd11, %rd2, %rd10;
	st.global.u32 	[%rd11], %r48;
	add.s32 	%r52, %r52, %r5;
	setp.lt.u32 	%p11, %r52, %r7;
	@%p11 bra 	$L__BB31_12;

$L__BB31_13:
	ret;

}
	// .globl	mkperm_phase_1_small
.visible .entry mkperm_phase_1_small(
	.param .u64 mkperm_phase_1_small_param_0,
	.param .u64 mkperm_phase_1_small_param_1,
	.param .u32 mkperm_phase_1_small_param_2,
	.param .u32 mkperm_phase_1_small_param_3,
	.param .u32 mkperm_phase_1_small_param_4
)
{
	.reg .pred 	%p<12>;
	.reg .b32 	%r<47>;
	.reg .b64 	%rd<12>;


	ld.param.u64 	%rd4, [mkperm_phase_1_small_param_0];
	ld.param.u64 	%rd5, [mkperm_phase_1_small_param_1];
	ld.param.u32 	%r20, [mkperm_phase_1_small_param_2];
	ld.param.u32 	%r22, [mkperm_phase_1_small_param_3];
	ld.param.u32 	%r21, [mkperm_phase_1_small_param_4];
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r2, %ctaid.x;
	mul.lo.s32 	%r3, %r2, %r22;
	add.s32 	%r4, %r3, %r22;
	mov.u32 	%r46, %tid.x;
	setp.ge.u32 	%p2, %r46, %r21;
	@%p2 bra 	$L__BB32_3;

	mov.u32 	%r43, %r46;

$L__BB32_2:
	shl.b32 	%r23, %r43, 2;
	mov.u32 	%r24, shared;
	add.s32 	%r25, %r24, %r23;
	mov.u32 	%r26, 0;
	st.shared.u32 	[%r25], %r26;
	add.s32 	%r43, %r43, %r1;
	setp.lt.u32 	%p3, %r43, %r21;
	@%p3 bra 	$L__BB32_2;

$L__BB32_3:
	bar.sync 	0;
	add.s32 	%r44, %r3, %r46;
	setp.ge.u32 	%p4, %r44, %r4;
	@%p4 bra 	$L__BB32_10;

	mov.u32 	%r27, WARP_SZ;
	add.s32 	%r28, %r27, -1;
	and.b32  	%r9, %r28, %r46;
	cvta.to.global.u64 	%rd1, %rd4;

$L__BB32_5:
	setp.ge.u32 	%p5, %r44, %r20;
	setp.lt.u32 	%p6, %r44, %r20;
	mov.u32 	%r29, -1;
	vote.sync.ballot.b32 	%r11, %p6, %r29;
	@%p5 bra 	$L__BB32_9;

	mul.wide.u32 	%rd6, %r44, 4;
	add.s64 	%rd7, %rd1, %rd6;
	ld.global.u32 	%r12, [%rd7];
	match.any.sync.b32 	%r13, %r12, %r11;
	brev.b32 	%r31, %r13;
	bfind.shiftamt.u32 	%r14, %r31;
	setp.ne.s32 	%p7, %r9, %r14;
	mov.u32 	%r45, 0;
	@%p7 bra 	$L__BB32_8;

	shl.b32 	%r32, %r12, 2;
	mov.u32 	%r33, shared;
	add.s32 	%r34, %r33, %r32;
	popc.b32 	%r35, %r13;
	atom.shared.add.u32 	%r45, [%r34], %r35;

$L__BB32_8:
	mov.u32 	%r36, 31;
	shfl.sync.idx.b32 	%r37|%p8, %r45, %r14, %r36, %r13;

$L__BB32_9:
	add.s32 	%r44, %r44, %r1;
	setp.lt.u32 	%p9, %r44, %r4;
	@%p9 bra 	$L__BB32_5;

$L__BB32_10:
	bar.sync 	0;
	@%p2 bra 	$L__BB32_13;

	cvta.to.global.u64 	%rd2, %rd5;
	mul.lo.s32 	%r38, %r2, %r21;
	cvt.u64.u32 	%rd3, %r38;
	mov.u32 	%r40, shared;

$L__BB32_12:
	shl.b32 	%r39, %r46, 2;
	add.s32 	%r41, %r40, %r39;
	ld.shared.u32 	%r42, [%r41];
	cvt.u64.u32 	%rd8, %r46;
	add.s64 	%rd9, %rd8, %rd3;
	shl.b64 	%rd10, %rd9, 2;
	add.s64 	%rd11, %rd2, %rd10;
	st.global.u32 	[%rd11], %r42;
	add.s32 	%r46, %r46, %r1;
	setp.lt.u32 	%p11, %r46, %r21;
	@%p11 bra 	$L__BB32_12;

$L__BB32_13:
	ret;

}
	// .globl	mkperm_phase_1_large
.visible .entry mkperm_phase_1_large(
	.param .u64 mkperm_phase_1_large_param_0,
	.param .u64 mkperm_phase_1_large_param_1,
	.param .u32 mkperm_phase_1_large_param_2,
	.param .u32 mkperm_phase_1_large_param_3,
	.param .u32 mkperm_phase_1_large_param_4
)
{
	.reg .pred 	%p<8>;
	.reg .b32 	%r<30>;
	.reg .b64 	%rd<12>;


	ld.param.u64 	%rd4, [mkperm_phase_1_large_param_0];
	ld.param.u64 	%rd5, [mkperm_phase_1_large_param_1];
	ld.param.u32 	%r15, [mkperm_phase_1_large_param_2];
	ld.param.u32 	%r17, [mkperm_phase_1_large_param_3];
	ld.param.u32 	%r16, [mkperm_phase_1_large_param_4];
	mov.u32 	%r1, %ctaid.x;
	mul.lo.s32 	%r18, %r1, %r17;
	add.s32 	%r2, %r18, %r17;
	mov.u32 	%r3, %tid.x;
	add.s32 	%r28, %r18, %r3;
	setp.ge.u32 	%p2, %r28, %r2;
	@%p2 bra 	$L__BB33_7;

	mov.u32 	%r19, WARP_SZ;
	add.s32 	%r20, %r19, -1;
	and.b32  	%r5, %r20, %r3;
	mul.lo.s32 	%r21, %r1, %r16;
	cvt.u64.u32 	%rd1, %r21;
	mov.u32 	%r6, %ntid.x;
	cvta.to.global.u64 	%rd2, %rd4;
	cvta.to.global.u64 	%rd3, %rd5;

$L__BB33_2:
	setp.ge.u32 	%p3, %r28, %r15;
	setp.lt.u32 	%p4, %r28, %r15;
	mov.u32 	%r22, -1;
	vote.sync.ballot.b32 	%r8, %p4, %r22;
	@%p3 bra 	$L__BB33_6;

	mul.wide.u32 	%rd6, %r28, 4;
	add.s64 	%rd7, %rd2, %rd6;
	ld.global.u32 	%r9, [%rd7];
	match.any.sync.b32 	%r10, %r9, %r8;
	brev.b32 	%r24, %r10;
	bfind.shiftamt.u32 	%r11, %r24;
	setp.ne.s32 	%p5, %r5, %r11;
	mov.u32 	%r29, 0;
	@%p5 bra 	$L__BB33_5;

	cvt.u64.u32 	%rd8, %r9;
	add.s64 	%rd9, %rd8, %rd1;
	shl.b64 	%rd10, %rd9, 2;
	add.s64 	%rd11, %rd3, %rd10;
	popc.b32 	%r25, %r10;
	atom.global.add.u32 	%r29, [%rd11], %r25;

$L__BB33_5:
	mov.u32 	%r26, 31;
	shfl.sync.idx.b32 	%r27|%p6, %r29, %r11, %r26, %r10;

$L__BB33_6:
	add.s32 	%r28, %r28, %r6;
	setp.lt.u32 	%p7, %r28, %r2;
	@%p7 bra 	$L__BB33_2;

$L__BB33_7:
	ret;

}
	// .globl	mkperm_phase_3
.visible .entry mkperm_phase_3(
	.param .u64 mkperm_phase_3_param_0,
	.param .u32 mkperm_phase_3_param_1,
	.param .u32 mkperm_phase_3_param_2,
	.param .u32 mkperm_phase_3_param_3,
	.param .u64 mkperm_phase_3_param_4,
	.param .u64 mkperm_phase_3_param_5
)
{
	.reg .pred 	%p<11>;
	.reg .b32 	%r<47>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd6, [mkperm_phase_3_param_0];
	ld.param.u32 	%r22, [mkperm_phase_3_param_1];
	ld.param.u32 	%r23, [mkperm_phase_3_param_2];
	ld.param.u32 	%r24, [mkperm_phase_3_param_3];
	ld.param.u64 	%rd4, [mkperm_phase_3_param_4];
	ld.param.u64 	%rd5, [mkperm_phase_3_param_5];
	cvta.to.global.u64 	%rd1, %rd6;
	mov.u32 	%r25, WARP_SZ;
	add.s32 	%r26, %r25, -1;
	mov.u32 	%r1, %tid.x;
	and.b32  	%r2, %r26, %r1;
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r27, %ctaid.x;
	mad.lo.s32 	%r43, %r27, %r3, %r1;
	setp.ge.u32 	%p2, %r43, %r23;
	@%p2 bra 	$L__BB34_13;

	shl.b32 	%r28, %r1, 2;
	mov.u32 	%r29, shared;
	add.s32 	%r5, %r29, %r28;
	add.s32 	%r6, %r1, 1;
	mov.u32 	%r30, %nctaid.x;
	mul.lo.s32 	%r7, %r3, %r30;
	mov.u32 	%r31, 32;
	sub.s32 	%r8, %r31, %r2;
	cvta.to.global.u64 	%rd2, %rd4;
	cvta.to.global.u64 	%rd3, %rd5;

$L__BB34_2:
	setp.ge.u32 	%p3, %r43, %r22;
	mov.u32 	%r44, %r24;
	@%p3 bra 	$L__BB34_4;

	mul.wide.u32 	%rd7, %r43, 4;
	add.s64 	%rd8, %rd1, %rd7;
	ld.global.u32 	%r44, [%rd8];

$L__BB34_4:
	st.shared.u32 	[%r5], %r44;
	bar.sync 	0;
	setp.lt.u32 	%p4, %r6, %r3;
	@%p4 bra 	$L__BB34_7;
	bra.uni 	$L__BB34_5;

$L__BB34_7:
	ld.shared.u32 	%r45, [%r5+4];
	bra.uni 	$L__BB34_8;

$L__BB34_5:
	add.s32 	%r12, %r43, 1;
	setp.ge.u32 	%p5, %r12, %r22;
	mov.u32 	%r45, %r24;
	@%p5 bra 	$L__BB34_8;

	mul.wide.u32 	%rd9, %r12, 4;
	add.s64 	%rd10, %rd1, %rd9;
	ld.global.u32 	%r45, [%rd10];

$L__BB34_8:
	setp.eq.s32 	%p6, %r45, %r44;
	setp.ne.s32 	%p7, %r45, %r44;
	mov.u32 	%r32, -1;
	vote.sync.ballot.b32 	%r16, %p7, %r32;
	@%p6 bra 	$L__BB34_12;

	brev.b32 	%r34, %r16;
	bfind.shiftamt.u32 	%r18, %r34;
	setp.ne.s32 	%p8, %r2, %r18;
	mov.u32 	%r33, 0;
	mov.u32 	%r46, %r33;
	@%p8 bra 	$L__BB34_11;

	popc.b32 	%r35, %r16;
	atom.global.add.u32 	%r46, [%rd2], %r35;

$L__BB34_11:
	mov.u32 	%r36, 31;
	shfl.sync.idx.b32 	%r37|%p9, %r46, %r18, %r36, %r16;
	shl.b32 	%r38, %r16, %r8;
	popc.b32 	%r39, %r38;
	add.s32 	%r40, %r37, %r39;
	mul.wide.u32 	%rd11, %r40, 16;
	add.s64 	%rd12, %rd3, %rd11;
	sub.s32 	%r41, %r45, %r44;
	st.global.v4.u32 	[%rd12], {%r43, %r44, %r41, %r33};

$L__BB34_12:
	add.s32 	%r43, %r43, %r7;
	setp.lt.u32 	%p10, %r43, %r23;
	@%p10 bra 	$L__BB34_2;

$L__BB34_13:
	ret;

}
	// .globl	mkperm_phase_4_tiny
.visible .entry mkperm_phase_4_tiny(
	.param .u64 mkperm_phase_4_tiny_param_0,
	.param .u64 mkperm_phase_4_tiny_param_1,
	.param .u64 mkperm_phase_4_tiny_param_2,
	.param .u32 mkperm_phase_4_tiny_param_3,
	.param .u32 mkperm_phase_4_tiny_param_4,
	.param .u32 mkperm_phase_4_tiny_param_5
)
{
	.reg .pred 	%p<10>;
	.reg .b32 	%r<52>;
	.reg .b64 	%rd<16>;


	ld.param.u64 	%rd5, [mkperm_phase_4_tiny_param_0];
	ld.param.u64 	%rd6, [mkperm_phase_4_tiny_param_1];
	ld.param.u64 	%rd7, [mkperm_phase_4_tiny_param_2];
	ld.param.u32 	%r23, [mkperm_phase_4_tiny_param_3];
	ld.param.u32 	%r25, [mkperm_phase_4_tiny_param_4];
	ld.param.u32 	%r24, [mkperm_phase_4_tiny_param_5];
	mov.u32 	%r1, %ctaid.x;
	mul.lo.s32 	%r2, %r1, %r25;
	add.s32 	%r3, %r2, %r25;
	mov.u32 	%r4, WARP_SZ;
	mov.u32 	%r5, %ntid.x;
	div.u32 	%r6, %r5, %r4;
	mov.u32 	%r7, %tid.x;
	mul.lo.s32 	%r8, %r6, %r24;
	setp.ge.u32 	%p2, %r7, %r8;
	@%p2 bra 	$L__BB35_3;

	mul.lo.s32 	%r26, %r1, %r24;
	mul.lo.s32 	%r27, %r26, %r6;
	cvt.u64.u32 	%rd1, %r27;
	cvta.to.global.u64 	%rd2, %rd6;
	mov.u32 	%r49, %r7;

$L__BB35_2:
	cvt.u64.u32 	%rd8, %r49;
	add.s64 	%rd9, %rd8, %rd1;
	shl.b64 	%rd10, %rd9, 2;
	add.s64 	%rd11, %rd2, %rd10;
	ld.global.u32 	%r28, [%rd11];
	shl.b32 	%r29, %r49, 2;
	mov.u32 	%r30, shared;
	add.s32 	%r31, %r30, %r29;
	st.shared.u32 	[%r31], %r28;
	add.s32 	%r49, %r49, %r5;
	setp.lt.u32 	%p3, %r49, %r8;
	@%p3 bra 	$L__BB35_2;

$L__BB35_3:
	bar.sync 	0;
	add.s32 	%r50, %r2, %r7;
	setp.ge.u32 	%p4, %r50, %r3;
	@%p4 bra 	$L__BB35_10;

	add.s32 	%r32, %r4, -1;
	and.b32  	%r12, %r32, %r7;
	mov.u32 	%r33, 32;
	sub.s32 	%r13, %r33, %r12;
	cvta.to.global.u64 	%rd3, %rd7;
	cvta.to.global.u64 	%rd4, %rd5;
	div.u32 	%r34, %r7, %r4;
	mul.lo.s32 	%r14, %r34, %r24;

$L__BB35_5:
	setp.ge.u32 	%p5, %r50, %r23;
	setp.lt.u32 	%p6, %r50, %r23;
	mov.u32 	%r35, -1;
	vote.sync.ballot.b32 	%r16, %p6, %r35;
	@%p5 bra 	$L__BB35_9;

	mul.wide.u32 	%rd12, %r50, 4;
	add.s64 	%rd13, %rd4, %rd12;
	ld.global.u32 	%r17, [%rd13];
	match.any.sync.b32 	%r18, %r17, %r16;
	brev.b32 	%r37, %r18;
	bfind.shiftamt.u32 	%r19, %r37;
	setp.ne.s32 	%p7, %r12, %r19;
	mov.u32 	%r51, 0;
	@%p7 bra 	$L__BB35_8;

	add.s32 	%r38, %r17, %r14;
	shl.b32 	%r39, %r38, 2;
	mov.u32 	%r40, shared;
	add.s32 	%r41, %r40, %r39;
	popc.b32 	%r42, %r18;
	ld.shared.u32 	%r51, [%r41];
	add.s32 	%r43, %r51, %r42;
	st.shared.u32 	[%r41], %r43;

$L__BB35_8:
	mov.u32 	%r44, 31;
	shfl.sync.idx.b32 	%r45|%p8, %r51, %r19, %r44, %r18;
	shl.b32 	%r46, %r18, %r13;
	popc.b32 	%r47, %r46;
	add.s32 	%r48, %r45, %r47;
	mul.wide.u32 	%rd14, %r48, 4;
	add.s64 	%rd15, %rd3, %rd14;
	st.global.u32 	[%rd15], %r50;

$L__BB35_9:
	add.s32 	%r50, %r50, %r5;
	setp.lt.u32 	%p9, %r50, %r3;
	@%p9 bra 	$L__BB35_5;

$L__BB35_10:
	ret;

}
	// .globl	mkperm_phase_4_small
.visible .entry mkperm_phase_4_small(
	.param .u64 mkperm_phase_4_small_param_0,
	.param .u64 mkperm_phase_4_small_param_1,
	.param .u64 mkperm_phase_4_small_param_2,
	.param .u32 mkperm_phase_4_small_param_3,
	.param .u32 mkperm_phase_4_small_param_4,
	.param .u32 mkperm_phase_4_small_param_5
)
{
	.reg .pred 	%p<10>;
	.reg .b32 	%r<45>;
	.reg .b64 	%rd<16>;


	ld.param.u64 	%rd5, [mkperm_phase_4_small_param_0];
	ld.param.u64 	%rd6, [mkperm_phase_4_small_param_1];
	ld.param.u64 	%rd7, [mkperm_phase_4_small_param_2];
	ld.param.u32 	%r19, [mkperm_phase_4_small_param_3];
	ld.param.u32 	%r21, [mkperm_phase_4_small_param_4];
	ld.param.u32 	%r20, [mkperm_phase_4_small_param_5];
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r2, %ctaid.x;
	mul.lo.s32 	%r3, %r2, %r21;
	add.s32 	%r4, %r3, %r21;
	mov.u32 	%r5, %tid.x;
	setp.ge.u32 	%p2, %r5, %r20;
	@%p2 bra 	$L__BB36_3;

	mul.lo.s32 	%r22, %r2, %r20;
	cvt.u64.u32 	%rd1, %r22;
	cvta.to.global.u64 	%rd2, %rd6;
	mov.u32 	%r42, %r5;

$L__BB36_2:
	cvt.u64.u32 	%rd8, %r42;
	add.s64 	%rd9, %rd8, %rd1;
	shl.b64 	%rd10, %rd9, 2;
	add.s64 	%rd11, %rd2, %rd10;
	ld.global.u32 	%r23, [%rd11];
	shl.b32 	%r24, %r42, 2;
	mov.u32 	%r25, shared;
	add.s32 	%r26, %r25, %r24;
	st.shared.u32 	[%r26], %r23;
	add.s32 	%r42, %r42, %r1;
	setp.lt.u32 	%p3, %r42, %r20;
	@%p3 bra 	$L__BB36_2;

$L__BB36_3:
	bar.sync 	0;
	add.s32 	%r43, %r3, %r5;
	setp.ge.u32 	%p4, %r43, %r4;
	@%p4 bra 	$L__BB36_10;

	mov.u32 	%r27, WARP_SZ;
	add.s32 	%r28, %r27, -1;
	and.b32  	%r9, %r28, %r5;
	mov.u32 	%r29, 32;
	sub.s32 	%r10, %r29, %r9;
	cvta.to.global.u64 	%rd3, %rd7;
	cvta.to.global.u64 	%rd4, %rd5;

$L__BB36_5:
	setp.ge.u32 	%p5, %r43, %r19;
	setp.lt.u32 	%p6, %r43, %r19;
	mov.u32 	%r30, -1;
	vote.sync.ballot.b32 	%r12, %p6, %r30;
	@%p5 bra 	$L__BB36_9;

	mul.wide.u32 	%rd12, %r43, 4;
	add.s64 	%rd13, %rd4, %rd12;
	ld.global.u32 	%r13, [%rd13];
	match.any.sync.b32 	%r14, %r13, %r12;
	brev.b32 	%r32, %r14;
	bfind.shiftamt.u32 	%r15, %r32;
	setp.ne.s32 	%p7, %r9, %r15;
	mov.u32 	%r44, 0;
	@%p7 bra 	$L__BB36_8;

	shl.b32 	%r33, %r13, 2;
	mov.u32 	%r34, shared;
	add.s32 	%r35, %r34, %r33;
	popc.b32 	%r36, %r14;
	atom.shared.add.u32 	%r44, [%r35], %r36;

$L__BB36_8:
	mov.u32 	%r37, 31;
	shfl.sync.idx.b32 	%r38|%p8, %r44, %r15, %r37, %r14;
	shl.b32 	%r39, %r14, %r10;
	popc.b32 	%r40, %r39;
	add.s32 	%r41, %r38, %r40;
	mul.wide.u32 	%rd14, %r41, 4;
	add.s64 	%rd15, %rd3, %rd14;
	st.global.u32 	[%rd15], %r43;

$L__BB36_9:
	add.s32 	%r43, %r43, %r1;
	setp.lt.u32 	%p9, %r43, %r4;
	@%p9 bra 	$L__BB36_5;

$L__BB36_10:
	ret;

}
	// .globl	mkperm_phase_4_large
.visible .entry mkperm_phase_4_large(
	.param .u64 mkperm_phase_4_large_param_0,
	.param .u64 mkperm_phase_4_large_param_1,
	.param .u64 mkperm_phase_4_large_param_2,
	.param .u32 mkperm_phase_4_large_param_3,
	.param .u32 mkperm_phase_4_large_param_4,
	.param .u32 mkperm_phase_4_large_param_5
)
{
	.reg .pred 	%p<8>;
	.reg .b32 	%r<35>;
	.reg .b64 	%rd<16>;


	ld.param.u64 	%rd5, [mkperm_phase_4_large_param_0];
	ld.param.u64 	%rd6, [mkperm_phase_4_large_param_1];
	ld.param.u64 	%rd7, [mkperm_phase_4_large_param_2];
	ld.param.u32 	%r16, [mkperm_phase_4_large_param_3];
	ld.param.u32 	%r18, [mkperm_phase_4_large_param_4];
	ld.param.u32 	%r17, [mkperm_phase_4_large_param_5];
	mov.u32 	%r1, %ctaid.x;
	mul.lo.s32 	%r19, %r1, %r18;
	add.s32 	%r2, %r19, %r18;
	mov.u32 	%r3, %tid.x;
	add.s32 	%r33, %r19, %r3;
	setp.ge.u32 	%p2, %r33, %r2;
	@%p2 bra 	$L__BB37_7;

	mov.u32 	%r20, WARP_SZ;
	add.s32 	%r21, %r20, -1;
	and.b32  	%r5, %r21, %r3;
	mov.u32 	%r22, 32;
	sub.s32 	%r6, %r22, %r5;
	mul.lo.s32 	%r23, %r1, %r17;
	cvt.u64.u32 	%rd1, %r23;
	mov.u32 	%r7, %ntid.x;
	cvta.to.global.u64 	%rd2, %rd5;
	cvta.to.global.u64 	%rd3, %rd6;
	cvta.to.global.u64 	%rd4, %rd7;

$L__BB37_2:
	setp.ge.u32 	%p3, %r33, %r16;
	setp.lt.u32 	%p4, %r33, %r16;
	mov.u32 	%r24, -1;
	vote.sync.ballot.b32 	%r9, %p4, %r24;
	@%p3 bra 	$L__BB37_6;

	mul.wide.u32 	%rd8, %r33, 4;
	add.s64 	%rd9, %rd2, %rd8;
	ld.global.u32 	%r10, [%rd9];
	match.any.sync.b32 	%r11, %r10, %r9;
	brev.b32 	%r26, %r11;
	bfind.shiftamt.u32 	%r12, %r26;
	setp.ne.s32 	%p5, %r5, %r12;
	mov.u32 	%r34, 0;
	@%p5 bra 	$L__BB37_5;

	cvt.u64.u32 	%rd10, %r10;
	add.s64 	%rd11, %rd10, %rd1;
	shl.b64 	%rd12, %rd11, 2;
	add.s64 	%rd13, %rd3, %rd12;
	popc.b32 	%r27, %r11;
	atom.global.add.u32 	%r34, [%rd13], %r27;

$L__BB37_5:
	mov.u32 	%r28, 31;
	shfl.sync.idx.b32 	%r29|%p6, %r34, %r12, %r28, %r11;
	shl.b32 	%r30, %r11, %r6;
	popc.b32 	%r31, %r30;
	add.s32 	%r32, %r29, %r31;
	mul.wide.u32 	%rd14, %r32, 4;
	add.s64 	%rd15, %rd4, %rd14;
	st.global.u32 	[%rd15], %r33;

$L__BB37_6:
	add.s32 	%r33, %r33, %r7;
	setp.lt.u32 	%p7, %r33, %r2;
	@%p7 bra 	$L__BB37_2;

$L__BB37_7:
	ret;

}
	// .globl	transpose
.visible .entry transpose(
	.param .u64 transpose_param_0,
	.param .u64 transpose_param_1,
	.param .u32 transpose_param_2,
	.param .u32 transpose_param_3
)
{
	.reg .pred 	%p<7>;
	.reg .b32 	%r<25>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [transpose_param_0];
	ld.param.u64 	%rd2, [transpose_param_1];
	ld.param.u32 	%r9, [transpose_param_2];
	ld.param.u32 	%r10, [transpose_param_3];
	mov.u32 	%r11, %ctaid.x;
	shl.b32 	%r1, %r11, 4;
	mov.u32 	%r2, %tid.x;
	add.s32 	%r3, %r1, %r2;
	mov.u32 	%r12, %ctaid.y;
	shl.b32 	%r4, %r12, 4;
	mov.u32 	%r5, %tid.y;
	add.s32 	%r6, %r4, %r5;
	setp.ge.u32 	%p1, %r6, %r9;
	setp.ge.u32 	%p2, %r3, %r10;
	or.pred  	%p3, %p1, %p2;
	@%p3 bra 	$L__BB38_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mad.lo.s32 	%r13, %r6, %r10, %r3;
	mul.wide.u32 	%rd4, %r13, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.u32 	%r14, [%rd5];
	mad.lo.s32 	%r15, %r5, 17, %r2;
	shl.b32 	%r16, %r15, 2;
	mov.u32 	%r17, shared;
	add.s32 	%r18, %r17, %r16;
	st.shared.u32 	[%r18], %r14;

$L__BB38_2:
	bar.sync 	0;
	add.s32 	%r7, %r1, %r5;
	setp.ge.u32 	%p4, %r7, %r10;
	add.s32 	%r8, %r4, %r2;
	setp.ge.u32 	%p5, %r8, %r9;
	or.pred  	%p6, %p5, %p4;
	@%p6 bra 	$L__BB38_4;

	mad.lo.s32 	%r19, %r2, 17, %r5;
	shl.b32 	%r20, %r19, 2;
	mov.u32 	%r21, shared;
	add.s32 	%r22, %r21, %r20;
	ld.shared.u32 	%r23, [%r22];
	mad.lo.s32 	%r24, %r7, %r9, %r8;
	cvta.to.global.u64 	%rd6, %rd2;
	mul.wide.u32 	%rd7, %r24, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.u32 	[%rd8], %r23;

$L__BB38_4:
	ret;

}
	// .globl	poke_u8
.visible .entry poke_u8(
	.param .u64 poke_u8_param_0,
	.param .u8 poke_u8_param_1
)
{
	.reg .b16 	%rs<2>;
	.reg .b64 	%rd<3>;


	ld.param.u8 	%rs1, [poke_u8_param_1];
	ld.param.u64 	%rd1, [poke_u8_param_0];
	cvta.to.global.u64 	%rd2, %rd1;
	st.global.u8 	[%rd2], %rs1;
	ret;

}
	// .globl	poke_u16
.visible .entry poke_u16(
	.param .u64 poke_u16_param_0,
	.param .u16 poke_u16_param_1
)
{
	.reg .b16 	%rs<2>;
	.reg .b64 	%rd<3>;


	ld.param.u64 	%rd1, [poke_u16_param_0];
	ld.param.u16 	%rs1, [poke_u16_param_1];
	cvta.to.global.u64 	%rd2, %rd1;
	st.global.u16 	[%rd2], %rs1;
	ret;

}
	// .globl	poke_u32
.visible .entry poke_u32(
	.param .u64 poke_u32_param_0,
	.param .u32 poke_u32_param_1
)
{
	.reg .b32 	%r<2>;
	.reg .b64 	%rd<3>;


	ld.param.u64 	%rd1, [poke_u32_param_0];
	ld.param.u32 	%r1, [poke_u32_param_1];
	cvta.to.global.u64 	%rd2, %rd1;
	st.global.u32 	[%rd2], %r1;
	ret;

}
	// .globl	poke_u64
.visible .entry poke_u64(
	.param .u64 poke_u64_param_0,
	.param .u64 poke_u64_param_1
)
{
	.reg .b64 	%rd<4>;


	ld.param.u64 	%rd1, [poke_u64_param_0];
	ld.param.u64 	%rd2, [poke_u64_param_1];
	cvta.to.global.u64 	%rd3, %rd1;
	st.global.u64 	[%rd3], %rd2;
	ret;

}
	// .globl	fill_64
.visible .entry fill_64(
	.param .u64 fill_64_param_0,
	.param .u32 fill_64_param_1,
	.param .u64 fill_64_param_2
)
{
	.reg .pred 	%p<3>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<6>;


	ld.param.u64 	%rd2, [fill_64_param_0];
	ld.param.u32 	%r6, [fill_64_param_1];
	ld.param.u64 	%rd3, [fill_64_param_2];
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r10, %r7, %r1, %r8;
	setp.ge.u32 	%p1, %r10, %r6;
	@%p1 bra 	$L__BB43_3;

	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r3, %r1, %r9;
	cvta.to.global.u64 	%rd1, %rd2;

$L__BB43_2:
	mul.wide.u32 	%rd4, %r10, 8;
	add.s64 	%rd5, %rd1, %rd4;
	st.global.u64 	[%rd5], %rd3;
	add.s32 	%r10, %r10, %r3;
	setp.lt.u32 	%p2, %r10, %r6;
	@%p2 bra 	$L__BB43_2;

$L__BB43_3:
	ret;

}
	// .globl	vcall_prepare
.visible .entry vcall_prepare(
	.param .u64 vcall_prepare_param_0,
	.param .u64 vcall_prepare_param_1,
	.param .u32 vcall_prepare_param_2
)
{
	.reg .pred 	%p<8>;
	.reg .b16 	%rs<3>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd3, [vcall_prepare_param_0];
	ld.param.u64 	%rd4, [vcall_prepare_param_1];
	ld.param.u32 	%r2, [vcall_prepare_param_2];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.u32 	%p1, %r1, %r2;
	@%p1 bra 	$L__BB44_12;

	cvta.to.global.u64 	%rd5, %rd3;
	cvta.to.global.u64 	%rd6, %rd4;
	mul.wide.u32 	%rd7, %r1, 16;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.v2.u32 	{%r7, %r8}, [%rd8];
	ld.global.u64 	%rd1, [%rd8+8];
	cvt.u64.u32 	%rd9, %r7;
	add.s64 	%rd2, %rd5, %rd9;
	setp.gt.s32 	%p2, %r8, 1;
	@%p2 bra 	$L__BB44_4;
	bra.uni 	$L__BB44_2;

$L__BB44_4:
	setp.eq.s32 	%p3, %r8, 2;
	@%p3 bra 	$L__BB44_9;

	setp.eq.s32 	%p4, %r8, 4;
	@%p4 bra 	$L__BB44_8;

	setp.ne.s32 	%p5, %r8, 8;
	@%p5 bra 	$L__BB44_12;

	ld.u64 	%rd10, [%rd1];
	st.global.u64 	[%rd2], %rd10;
	bra.uni 	$L__BB44_12;

$L__BB44_2:
	setp.eq.s32 	%p6, %r8, 0;
	@%p6 bra 	$L__BB44_11;

	setp.eq.s32 	%p7, %r8, 1;
	@%p7 bra 	$L__BB44_10;
	bra.uni 	$L__BB44_12;

$L__BB44_10:
	ld.u8 	%rs2, [%rd1];
	st.global.u8 	[%rd2], %rs2;
	bra.uni 	$L__BB44_12;

$L__BB44_9:
	ld.u16 	%rs1, [%rd1];
	st.global.u16 	[%rd2], %rs1;
	bra.uni 	$L__BB44_12;

$L__BB44_8:
	ld.u32 	%r10, [%rd1];
	st.global.u32 	[%rd2], %r10;
	bra.uni 	$L__BB44_12;

$L__BB44_11:
	st.global.u64 	[%rd2], %rd1;

$L__BB44_12:
	ret;

}
	// .globl	block_copy_u32
.visible .entry block_copy_u32(
	.param .u64 block_copy_u32_param_0,
	.param .u64 block_copy_u32_param_1,
	.param .u32 block_copy_u32_param_2,
	.param .u32 block_copy_u32_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<9>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [block_copy_u32_param_0];
	ld.param.u64 	%rd2, [block_copy_u32_param_1];
	ld.param.u32 	%r3, [block_copy_u32_param_2];
	ld.param.u32 	%r2, [block_copy_u32_param_3];
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %tid.x;
	mad.lo.s32 	%r1, %r4, %r5, %r6;
	setp.ge.u32 	%p1, %r1, %r3;
	@%p1 bra 	$L__BB45_2;

	cvta.to.global.u64 	%rd3, %rd1;
	div.u32 	%r7, %r1, %r2;
	mul.wide.u32 	%rd4, %r7, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.u32 	%r8, [%rd5];
	cvta.to.global.u64 	%rd6, %rd2;
	mul.wide.u32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.u32 	[%rd8], %r8;

$L__BB45_2:
	ret;

}
	// .globl	block_sum_u32
.visible .entry block_sum_u32(
	.param .u64 block_sum_u32_param_0,
	.param .u64 block_sum_u32_param_1,
	.param .u32 block_sum_u32_param_2,
	.param .u32 block_sum_u32_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<10>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [block_sum_u32_param_0];
	ld.param.u64 	%rd2, [block_sum_u32_param_1];
	ld.param.u32 	%r3, [block_sum_u32_param_2];
	ld.param.u32 	%r2, [block_sum_u32_param_3];
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %tid.x;
	mad.lo.s32 	%r1, %r4, %r5, %r6;
	setp.ge.u32 	%p1, %r1, %r3;
	@%p1 bra 	$L__BB46_2;

	cvta.to.global.u64 	%rd3, %rd1;
	div.u32 	%r7, %r1, %r2;
	cvta.to.global.u64 	%rd4, %rd2;
	mul.wide.u32 	%rd5, %r7, 4;
	add.s64 	%rd6, %rd4, %rd5;
	mul.wide.u32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd3, %rd7;
	ld.global.u32 	%r8, [%rd8];
	atom.global.add.u32 	%r9, [%rd6], %r8;

$L__BB46_2:
	ret;

}
	// .globl	block_copy_u64
.visible .entry block_copy_u64(
	.param .u64 block_copy_u64_param_0,
	.param .u64 block_copy_u64_param_1,
	.param .u32 block_copy_u64_param_2,
	.param .u32 block_copy_u64_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<8>;
	.reg .b64 	%rd<10>;


	ld.param.u64 	%rd1, [block_copy_u64_param_0];
	ld.param.u64 	%rd2, [block_copy_u64_param_1];
	ld.param.u32 	%r3, [block_copy_u64_param_2];
	ld.param.u32 	%r2, [block_copy_u64_param_3];
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %tid.x;
	mad.lo.s32 	%r1, %r4, %r5, %r6;
	setp.ge.u32 	%p1, %r1, %r3;
	@%p1 bra 	$L__BB47_2;

	cvta.to.global.u64 	%rd3, %rd1;
	div.u32 	%r7, %r1, %r2;
	mul.wide.u32 	%rd4, %r7, 8;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.u64 	%rd6, [%rd5];
	cvta.to.global.u64 	%rd7, %rd2;
	mul.wide.u32 	%rd8, %r1, 8;
	add.s64 	%rd9, %rd7, %rd8;
	st.global.u64 	[%rd9], %rd6;

$L__BB47_2:
	ret;

}
	// .globl	block_sum_u64
.visible .entry block_sum_u64(
	.param .u64 block_sum_u64_param_0,
	.param .u64 block_sum_u64_param_1,
	.param .u32 block_sum_u64_param_2,
	.param .u32 block_sum_u64_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<8>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd1, [block_sum_u64_param_0];
	ld.param.u64 	%rd2, [block_sum_u64_param_1];
	ld.param.u32 	%r3, [block_sum_u64_param_2];
	ld.param.u32 	%r2, [block_sum_u64_param_3];
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %tid.x;
	mad.lo.s32 	%r1, %r4, %r5, %r6;
	setp.ge.u32 	%p1, %r1, %r3;
	@%p1 bra 	$L__BB48_2;

	cvta.to.global.u64 	%rd3, %rd1;
	div.u32 	%r7, %r1, %r2;
	cvta.to.global.u64 	%rd4, %rd2;
	mul.wide.u32 	%rd5, %r7, 8;
	add.s64 	%rd6, %rd4, %rd5;
	mul.wide.u32 	%rd7, %r1, 8;
	add.s64 	%rd8, %rd3, %rd7;
	ld.global.u64 	%rd9, [%rd8];
	atom.global.add.u64 	%rd10, [%rd6], %rd9;

$L__BB48_2:
	ret;

}
	// .globl	block_copy_f32
.visible .entry block_copy_f32(
	.param .u64 block_copy_f32_param_0,
	.param .u64 block_copy_f32_param_1,
	.param .u32 block_copy_f32_param_2,
	.param .u32 block_copy_f32_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<8>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [block_copy_f32_param_0];
	ld.param.u64 	%rd2, [block_copy_f32_param_1];
	ld.param.u32 	%r3, [block_copy_f32_param_2];
	ld.param.u32 	%r2, [block_copy_f32_param_3];
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %tid.x;
	mad.lo.s32 	%r1, %r4, %r5, %r6;
	setp.ge.u32 	%p1, %r1, %r3;
	@%p1 bra 	$L__BB49_2;

	cvta.to.global.u64 	%rd3, %rd1;
	div.u32 	%r7, %r1, %r2;
	mul.wide.u32 	%rd4, %r7, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f1, [%rd5];
	cvta.to.global.u64 	%rd6, %rd2;
	mul.wide.u32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f1;

$L__BB49_2:
	ret;

}
	// .globl	block_sum_f32
.visible .entry block_sum_f32(
	.param .u64 block_sum_f32_param_0,
	.param .u64 block_sum_f32_param_1,
	.param .u32 block_sum_f32_param_2,
	.param .u32 block_sum_f32_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<8>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [block_sum_f32_param_0];
	ld.param.u64 	%rd2, [block_sum_f32_param_1];
	ld.param.u32 	%r3, [block_sum_f32_param_2];
	ld.param.u32 	%r2, [block_sum_f32_param_3];
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %tid.x;
	mad.lo.s32 	%r1, %r4, %r5, %r6;
	setp.ge.u32 	%p1, %r1, %r3;
	@%p1 bra 	$L__BB50_2;

	cvta.to.global.u64 	%rd3, %rd1;
	div.u32 	%r7, %r1, %r2;
	cvta.to.global.u64 	%rd4, %rd2;
	mul.wide.u32 	%rd5, %r7, 4;
	add.s64 	%rd6, %rd4, %rd5;
	mul.wide.u32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd3, %rd7;
	ld.global.f32 	%f1, [%rd8];
	atom.global.add.f32 	%f2, [%rd6], %f1;

$L__BB50_2:
	ret;

}
	// .globl	block_copy_f64
.visible .entry block_copy_f64(
	.param .u64 block_copy_f64_param_0,
	.param .u64 block_copy_f64_param_1,
	.param .u32 block_copy_f64_param_2,
	.param .u32 block_copy_f64_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<8>;
	.reg .f64 	%fd<2>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [block_copy_f64_param_0];
	ld.param.u64 	%rd2, [block_copy_f64_param_1];
	ld.param.u32 	%r3, [block_copy_f64_param_2];
	ld.param.u32 	%r2, [block_copy_f64_param_3];
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %tid.x;
	mad.lo.s32 	%r1, %r4, %r5, %r6;
	setp.ge.u32 	%p1, %r1, %r3;
	@%p1 bra 	$L__BB51_2;

	cvta.to.global.u64 	%rd3, %rd1;
	div.u32 	%r7, %r1, %r2;
	mul.wide.u32 	%rd4, %r7, 8;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f64 	%fd1, [%rd5];
	cvta.to.global.u64 	%rd6, %rd2;
	mul.wide.u32 	%rd7, %r1, 8;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f64 	[%rd8], %fd1;

$L__BB51_2:
	ret;

}
	// .globl	block_sum_f64
.visible .entry block_sum_f64(
	.param .u64 block_sum_f64_param_0,
	.param .u64 block_sum_f64_param_1,
	.param .u32 block_sum_f64_param_2,
	.param .u32 block_sum_f64_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<8>;
	.reg .f64 	%fd<3>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [block_sum_f64_param_0];
	ld.param.u64 	%rd2, [block_sum_f64_param_1];
	ld.param.u32 	%r3, [block_sum_f64_param_2];
	ld.param.u32 	%r2, [block_sum_f64_param_3];
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %tid.x;
	mad.lo.s32 	%r1, %r4, %r5, %r6;
	setp.ge.u32 	%p1, %r1, %r3;
	@%p1 bra 	$L__BB52_2;

	cvta.to.global.u64 	%rd3, %rd1;
	div.u32 	%r7, %r1, %r2;
	cvta.to.global.u64 	%rd4, %rd2;
	mul.wide.u32 	%rd5, %r7, 8;
	add.s64 	%rd6, %rd4, %rd5;
	mul.wide.u32 	%rd7, %r1, 8;
	add.s64 	%rd8, %rd3, %rd7;
	ld.global.f64 	%fd1, [%rd8];
	atom.global.add.f64 	%fd2, [%rd6], %fd1;

$L__BB52_2:
	ret;

}

